{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jeu de la Vie","text":""},{"location":"#presentation","title":"Pr\u00e9sentation","text":"<p>Le Jeu de la Vie est un automate cellulaire cr\u00e9\u00e9 par John Conway en 1970. Cette impl\u00e9mentation propose une version moderne et interactive du jeu classique.</p>"},{"location":"#caracteristiques-principales","title":"Caract\u00e9ristiques principales","text":"<ul> <li>Interface graphique moderne utilisant SFML</li> <li>Mode console pour les performances optimales</li> <li>Mode debug pour le d\u00e9veloppement</li> <li>Motifs pr\u00e9d\u00e9finis classiques et personnalisables</li> <li>Haute performance gr\u00e2ce \u00e0 une impl\u00e9mentation optimis\u00e9e</li> <li>Multi-plateforme : Linux, Windows, macOS</li> </ul>"},{"location":"#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<pre><code># Installation\ngit clone https://github.com/votre-repo/jeu-de-vie.git\ncd jeu-de-vie\nmkdir build &amp;&amp; cd build\ncmake ..\nmake\n\n# Lancement\n./jeu-de-vie\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Guide d'installation</li> <li>Guide d'utilisation</li> <li>Documentation technique</li> <li>Guide du d\u00e9veloppeur</li> </ul>"},{"location":"#captures-decran","title":"Captures d'\u00e9cran","text":""},{"location":"#contribution","title":"Contribution","text":"<p>Nous accueillons toutes les contributions ! Consultez notre guide de contribution pour commencer.</p>"},{"location":"#licence","title":"Licence","text":"<p>Ce projet est sous licence MIT. Voir le fichier LICENSE pour plus de d\u00e9tails.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>Toutes les modifications notables du projet seront document\u00e9es dans ce fichier.</p> <p>Le format est bas\u00e9 sur Keep a Changelog, et ce projet adh\u00e8re au Semantic Versioning.</p>"},{"location":"changelog/#120-2024-03-15","title":"[1.2.0] - 2024-03-15","text":""},{"location":"changelog/#ajoute","title":"Ajout\u00e9","text":"<ul> <li>Mode debug avec visualisation des \u00e9tats internes</li> <li>Nouveaux motifs pr\u00e9d\u00e9finis (canon \u00e0 planeur, pulsars)</li> <li>Support pour les fichiers de configuration YAML</li> <li>Interface en ligne de commande am\u00e9lior\u00e9e</li> </ul>"},{"location":"changelog/#modifie","title":"Modifi\u00e9","text":"<ul> <li>Optimisation majeure du moteur de simulation</li> <li>Refonte de l'interface utilisateur graphique</li> <li>Am\u00e9lioration de la gestion de la m\u00e9moire</li> </ul>"},{"location":"changelog/#corrige","title":"Corrig\u00e9","text":"<ul> <li>Correction des fuites m\u00e9moire dans le gestionnaire de motifs</li> <li>R\u00e9solution du bug de synchronisation en mode multi-thread</li> <li>Correction de l'affichage des statistiques en temps r\u00e9el</li> </ul>"},{"location":"changelog/#110-2024-02-01","title":"[1.1.0] - 2024-02-01","text":""},{"location":"changelog/#ajoute_1","title":"Ajout\u00e9","text":"<ul> <li>Mode console avec support couleur</li> <li>Syst\u00e8me de sauvegarde/chargement de parties</li> <li>Statistiques en temps r\u00e9el</li> <li>Documentation utilisateur compl\u00e8te</li> </ul>"},{"location":"changelog/#modifie_1","title":"Modifi\u00e9","text":"<ul> <li>Am\u00e9lioration des performances de rendu</li> <li>Mise \u00e0 jour de la biblioth\u00e8que SFML</li> <li>Simplification de l'API publique</li> </ul>"},{"location":"changelog/#deprecie","title":"D\u00e9pr\u00e9ci\u00e9","text":"<ul> <li>Ancien format de fichier de sauvegarde (.sav)</li> <li>Mode de rendu OpenGL legacy</li> </ul>"},{"location":"changelog/#corrige_1","title":"Corrig\u00e9","text":"<ul> <li>Bug de bordure infinie</li> <li>Probl\u00e8me de performance avec les grandes grilles</li> <li>Crash lors du redimensionnement de la fen\u00eatre</li> </ul>"},{"location":"changelog/#100-2024-01-01","title":"[1.0.0] - 2024-01-01","text":""},{"location":"changelog/#ajoute_2","title":"Ajout\u00e9","text":"<ul> <li>Premi\u00e8re version stable</li> <li>Interface graphique basique</li> <li>Motifs de base (planeur, bloc, clignotant)</li> <li>Contr\u00f4les souris et clavier</li> <li>Syst\u00e8me de grille infinie</li> <li>Mode pause/reprise</li> <li>Contr\u00f4le de la vitesse de simulation</li> </ul>"},{"location":"changelog/#notes-de-version","title":"Notes de version","text":"<ul> <li>Version initiale du Jeu de la Vie</li> <li>Support pour Windows, Linux et macOS</li> <li>Documentation de base</li> </ul>"},{"location":"changelog/#090-2023-12-15","title":"[0.9.0] - 2023-12-15","text":""},{"location":"changelog/#ajoute_3","title":"Ajout\u00e9","text":"<ul> <li>Version beta publique</li> <li>Tests unitaires et d'int\u00e9gration</li> <li>Pipeline CI/CD</li> <li>Documentation pr\u00e9liminaire</li> </ul>"},{"location":"changelog/#connu","title":"Connu","text":"<ul> <li>Probl\u00e8mes de performance sur grandes grilles</li> <li>Interface utilisateur basique</li> <li>Support limit\u00e9 des motifs </li> </ul>"},{"location":"quickstart/","title":"D\u00e9marrage rapide","text":""},{"location":"quickstart/#installation-rapide","title":"Installation rapide","text":""},{"location":"quickstart/#linux","title":"Linux","text":"<pre><code># D\u00e9pendances\nsudo apt update\nsudo apt install build-essential cmake libsfml-dev\n\n# Compilation\ngit clone https://github.com/votre-repo/jeu-de-vie.git\ncd jeu-de-vie\nmkdir build &amp;&amp; cd build\ncmake ..\nmake\n</code></pre>"},{"location":"quickstart/#windows","title":"Windows","text":"<ol> <li>Installer MSYS2</li> <li>Installer les d\u00e9pendances : <pre><code>pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-sfml\n</code></pre></li> <li>Compiler : <pre><code>git clone https://github.com/votre-repo/jeu-de-vie.git\ncd jeu-de-vie\nmkdir build &amp;&amp; cd build\ncmake ..\nmingw32-make\n</code></pre></li> </ol>"},{"location":"quickstart/#premier-lancement","title":"Premier lancement","text":""},{"location":"quickstart/#mode-graphique","title":"Mode graphique","text":"<pre><code>./jeu-de-vie -g\n</code></pre>"},{"location":"quickstart/#mode-console","title":"Mode console","text":"<pre><code>./jeu-de-vie -c\n</code></pre>"},{"location":"quickstart/#commandes-de-base","title":"Commandes de base","text":"<ul> <li>Espace : Pause/Reprise</li> <li>Clic gauche : Activer/d\u00e9sactiver cellule</li> <li>+/- : Ajuster la vitesse</li> <li>R : R\u00e9initialiser</li> <li>Q : Quitter</li> </ul>"},{"location":"quickstart/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<ul> <li>Guide d\u00e9taill\u00e9 d'installation</li> <li>Interface utilisateur</li> <li>Motifs pr\u00e9d\u00e9finis </li> </ul>"},{"location":"developpement/contribution/guide/","title":"Guide de contribution","text":""},{"location":"developpement/contribution/guide/#prerequis","title":"Pr\u00e9requis","text":""},{"location":"developpement/contribution/guide/#environnement-de-developpement","title":"Environnement de d\u00e9veloppement","text":"<ul> <li>Git 2.x+</li> <li>CMake 3.10+</li> <li>Compilateur C++17 compatible</li> <li>SFML 2.5+</li> <li>Python 3.8+ (pour les scripts)</li> </ul>"},{"location":"developpement/contribution/guide/#configuration-initiale","title":"Configuration initiale","text":"<pre><code># Fork et clone du projet\ngit clone https://github.com/votre-username/jeu-de-vie.git\ncd jeu-de-vie\n\n# Configuration de l'environnement\npython -m venv venv\nsource venv/bin/activate  # ou .\\venv\\Scripts\\activate sous Windows\npip install -r requirements-dev.txt\n\n# Configuration de pre-commit\npre-commit install\n</code></pre>"},{"location":"developpement/contribution/guide/#structure-du-projet","title":"Structure du projet","text":"<pre><code>jeu-de-vie/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 core/           # Logique m\u00e9tier\n\u2502   \u251c\u2500\u2500 renderer/       # Syst\u00e8mes de rendu\n\u2502   \u2514\u2500\u2500 utils/          # Utilitaires\n\u251c\u2500\u2500 include/            # Headers publics\n\u251c\u2500\u2500 tests/             # Tests unitaires et d'int\u00e9gration\n\u251c\u2500\u2500 docs/              # Documentation\n\u2514\u2500\u2500 scripts/           # Scripts utilitaires\n</code></pre>"},{"location":"developpement/contribution/guide/#workflow-de-developpement","title":"Workflow de d\u00e9veloppement","text":""},{"location":"developpement/contribution/guide/#1-creation-dune-branche","title":"1. Cr\u00e9ation d'une branche","text":"<pre><code># Pour une nouvelle fonctionnalit\u00e9\ngit checkout -b feature/nom-feature\n\n# Pour un correctif\ngit checkout -b fix/nom-bug\n</code></pre>"},{"location":"developpement/contribution/guide/#2-developpement","title":"2. D\u00e9veloppement","text":"<pre><code># Compilation\nmkdir build &amp;&amp; cd build\ncmake -DCMAKE_BUILD_TYPE=Debug ..\nmake -j$(nproc)\n\n# Tests\nctest --output-on-failure\n</code></pre>"},{"location":"developpement/contribution/guide/#3-validation","title":"3. Validation","text":"<pre><code># V\u00e9rification du style\n./scripts/check_style.sh\n\n# Tests unitaires\n./scripts/run_tests.sh\n\n# Analyse statique\n./scripts/static_analysis.sh\n</code></pre>"},{"location":"developpement/contribution/guide/#standards-de-code","title":"Standards de code","text":""},{"location":"developpement/contribution/guide/#style-c","title":"Style C++","text":"<pre><code>// Exemple de style\nclass MaClasse {\npublic:\n    explicit MaClasse(int valeur);\n    void maMethode();\n\nprivate:\n    int m_valeur;\n};\n\n// Impl\u00e9mentation\nvoid MaClasse::maMethode() {\n    // Code...\n}\n</code></pre>"},{"location":"developpement/contribution/guide/#documentation","title":"Documentation","text":"<pre><code>/**\n * @brief Description courte\n * \n * Description d\u00e9taill\u00e9e si n\u00e9cessaire\n * \n * @param param1 Description du param\u00e8tre\n * @return Description du retour\n * @throws Description des exceptions\n */\n</code></pre>"},{"location":"developpement/contribution/guide/#process-de-revue","title":"Process de revue","text":""},{"location":"developpement/contribution/guide/#checklist-pr","title":"Checklist PR","text":"<ul> <li>[ ] Tests passent</li> <li>[ ] Documentation \u00e0 jour</li> <li>[ ] Code format\u00e9</li> <li>[ ] Changelog mis \u00e0 jour</li> <li>[ ] Pas de conflits</li> </ul>"},{"location":"developpement/contribution/guide/#template-pr","title":"Template PR","text":"<p>```markdown</p>"},{"location":"developpement/contribution/guide/#description","title":"Description","text":"<p>Description des changements</p>"},{"location":"developpement/contribution/guide/#type-de-changement","title":"Type de changement","text":"<ul> <li>[ ] Nouvelle fonctionnalit\u00e9</li> <li>[ ] Correction de bug</li> <li>[ ] Documentation</li> <li>[ ] Autre</li> </ul>"},{"location":"developpement/contribution/guide/#comment-tester","title":"Comment tester","text":"<ol> <li>\u00c9tape 1</li> <li>\u00c9tape 2</li> <li>...</li> </ol>"},{"location":"developpement/contribution/guide/#screenshots-si-applicable","title":"Screenshots (si applicable)","text":""},{"location":"developpement/contribution/standards/","title":"Standards de d\u00e9veloppement","text":""},{"location":"developpement/contribution/standards/#style-de-code","title":"Style de code","text":""},{"location":"developpement/contribution/standards/#nommage","title":"Nommage","text":"<pre><code>// Classes : PascalCase\nclass GameManager {\n    // M\u00e9thodes : camelCase\n    void updateGrid();\n\n    // Variables membres : m_camelCase\n    int m_gridSize;\n\n    // Constantes : SCREAMING_SNAKE_CASE\n    static const int MAX_GRID_SIZE = 1000;\n};\n\n// \u00c9num\u00e9rations : PascalCase\nenum class CellState {\n    Alive,\n    Dead\n};\n</code></pre>"},{"location":"developpement/contribution/standards/#formatage","title":"Formatage","text":"<pre><code>// Accolades : nouvelle ligne\nvoid fonction()\n{\n    if (condition) {\n        // Code...\n    } else {\n        // Code...\n    }\n}\n\n// Espacement\nint fonction(int param1, int param2)\n{\n    int resultat = param1 + param2;\n    return resultat;\n}\n</code></pre>"},{"location":"developpement/contribution/standards/#documentation","title":"Documentation","text":""},{"location":"developpement/contribution/standards/#headers","title":"Headers","text":"<pre><code>/**\n * @file GameManager.hpp\n * @brief Gestion principale du jeu\n * @author \u00c9quipe de d\u00e9veloppement\n * @date 2024-03-15\n */\n\n/**\n * @class GameManager\n * @brief G\u00e8re le cycle de vie du jeu\n * \n * Description d\u00e9taill\u00e9e de la classe\n * et de ses responsabilit\u00e9s.\n */\n</code></pre>"},{"location":"developpement/contribution/standards/#methodes","title":"M\u00e9thodes","text":"<pre><code>/**\n * @brief Met \u00e0 jour l'\u00e9tat du jeu\n * \n * @param deltaTime Temps \u00e9coul\u00e9 depuis la derni\u00e8re mise \u00e0 jour\n * @return true si la mise \u00e0 jour est r\u00e9ussie\n * @throws GameException si une erreur survient\n */\nbool update(float deltaTime);\n</code></pre>"},{"location":"developpement/contribution/standards/#tests","title":"Tests","text":""},{"location":"developpement/contribution/standards/#structure","title":"Structure","text":"<pre><code>TEST_CASE(\"Nom du test\", \"[cat\u00e9gorie]\") {\n    // Arrangement\n    GameManager game;\n\n    SECTION(\"Description du sc\u00e9nario\") {\n        // Action\n        bool result = game.update(0.16f);\n\n        // Assertion\n        REQUIRE(result == true);\n    }\n}\n</code></pre>"},{"location":"developpement/contribution/standards/#conventions","title":"Conventions","text":"<ol> <li>Un fichier de test par classe</li> <li>Nommage explicite des cas de test</li> <li>Structure AAA (Arrange, Act, Assert)</li> <li>Tests des cas limites</li> </ol>"},{"location":"developpement/contribution/standards/#gestion-des-erreurs","title":"Gestion des erreurs","text":""},{"location":"developpement/contribution/standards/#exceptions","title":"Exceptions","text":"<pre><code>class GameException : public std::runtime_error {\npublic:\n    explicit GameException(const std::string&amp; message)\n        : std::runtime_error(message) {}\n};\n\nvoid fonction() {\n    if (erreur) {\n        throw GameException(\"Message d'erreur explicite\");\n    }\n}\n</code></pre>"},{"location":"developpement/contribution/standards/#logging","title":"Logging","text":"<pre><code>// Niveaux de log appropri\u00e9s\nLogger::debug(\"D\u00e9tail technique\");\nLogger::info(\"Information g\u00e9n\u00e9rale\");\nLogger::warn(\"Avertissement\");\nLogger::error(\"Erreur critique\");\n</code></pre>"},{"location":"developpement/contribution/standards/#performance","title":"Performance","text":""},{"location":"developpement/contribution/standards/#bonnes-pratiques","title":"Bonnes pratiques","text":"<pre><code>// Passage par r\u00e9f\u00e9rence\nvoid processGrid(const Grid&amp; grid);\n\n// Utilisation de constexpr\nconstexpr int GRID_SIZE = 100;\n\n// \u00c9viter les copies inutiles\nauto&amp; cell = grid.getCell(x, y);\n\n// R\u00e9servation m\u00e9moire\nvector&lt;Cell&gt; cells;\ncells.reserve(expectedSize);\n</code></pre>"},{"location":"developpement/contribution/standards/#securite","title":"S\u00e9curit\u00e9","text":""},{"location":"developpement/contribution/standards/#validation-des-entrees","title":"Validation des entr\u00e9es","text":"<pre><code>void setGridSize(int size) {\n    if (size &lt;= 0 || size &gt; MAX_GRID_SIZE) {\n        throw std::invalid_argument(\"Taille de grille invalide\");\n    }\n    m_gridSize = size;\n}\n</code></pre>"},{"location":"developpement/contribution/standards/#gestion-des-ressources","title":"Gestion des ressources","text":"<pre><code>// RAII\nclass FileHandler {\n    std::ifstream file;\npublic:\n    explicit FileHandler(const std::string&amp; path)\n        : file(path) {\n        if (!file) {\n            throw std::runtime_error(\"Erreur d'ouverture\");\n        }\n    }\n    ~FileHandler() {\n        if (file.is_open()) {\n            file.close();\n        }\n    }\n};\n</code></pre>"},{"location":"developpement/contribution/workflow/","title":"Workflow de d\u00e9veloppement","text":""},{"location":"developpement/contribution/workflow/#gestion-des-branches","title":"Gestion des branches","text":""},{"location":"developpement/contribution/workflow/#structure","title":"Structure","text":"<pre><code>main\n  \u251c\u2500\u2500 develop\n  \u2502   \u251c\u2500\u2500 feature/xxx\n  \u2502   \u251c\u2500\u2500 fix/xxx\n  \u2502   \u2514\u2500\u2500 docs/xxx\n  \u2514\u2500\u2500 release/x.x.x\n</code></pre>"},{"location":"developpement/contribution/workflow/#conventions-de-nommage","title":"Conventions de nommage","text":"<ul> <li><code>feature/*</code> : Nouvelles fonctionnalit\u00e9s</li> <li><code>fix/*</code> : Corrections de bugs</li> <li><code>docs/*</code> : Documentation</li> <li><code>release/*</code> : Versions de release</li> <li><code>hotfix/*</code> : Corrections urgentes</li> </ul>"},{"location":"developpement/contribution/workflow/#cycle-de-developpement","title":"Cycle de d\u00e9veloppement","text":""},{"location":"developpement/contribution/workflow/#1-planification","title":"1. Planification","text":"<pre><code>graph LR\n    A[Issue] --&gt; B[Discussion]\n    B --&gt; C[Planning]\n    C --&gt; D[Assignment]</code></pre>"},{"location":"developpement/contribution/workflow/#2-developpement","title":"2. D\u00e9veloppement","text":"<pre><code># Cr\u00e9ation de branche\ngit checkout develop\ngit pull origin develop\ngit checkout -b feature/ma-feature\n\n# D\u00e9veloppement it\u00e9ratif\ngit add .\ngit commit -m \"feat: description\"\ngit push origin feature/ma-feature\n</code></pre>"},{"location":"developpement/contribution/workflow/#3-revue-de-code","title":"3. Revue de code","text":"<pre><code>graph TD\n    A[PR Created] --&gt; B[Automated Checks]\n    B --&gt; C[Code Review]\n    C --&gt; D[Changes Requested]\n    D --&gt; B\n    C --&gt; E[Approved]\n    E --&gt; F[Merge]</code></pre>"},{"location":"developpement/contribution/workflow/#versionnement","title":"Versionnement","text":""},{"location":"developpement/contribution/workflow/#semantic-versioning","title":"Semantic Versioning","text":"<pre><code>MAJOR.MINOR.PATCH\n  \u2502     \u2502     \u2514\u2500 Corrections de bugs\n  \u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Nouvelles fonctionnalit\u00e9s r\u00e9trocompatibles\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Changements incompatibles\n</code></pre>"},{"location":"developpement/contribution/workflow/#changelog","title":"Changelog","text":"<pre><code># Changelog\n\n## [1.2.0] - 2024-03-15\n### Added\n- Nouvelle fonctionnalit\u00e9 X\n- Support pour Y\n\n### Fixed\n- Correction du bug Z\n- Am\u00e9lioration des performances\n\n### Changed\n- Mise \u00e0 jour de la d\u00e9pendance A\n</code></pre>"},{"location":"developpement/contribution/workflow/#cicd","title":"CI/CD","text":""},{"location":"developpement/contribution/workflow/#pipeline","title":"Pipeline","text":"<pre><code>stages:\n  - build\n  - test\n  - analyze\n  - deploy\n\nbuild:\n  stage: build\n  script:\n    - cmake .\n    - make\n\ntest:\n  stage: test\n  script:\n    - ./run_tests.sh\n\nanalyze:\n  stage: analyze\n  script:\n    - ./static_analysis.sh\n</code></pre>"},{"location":"developpement/contribution/workflow/#release","title":"Release","text":""},{"location":"developpement/contribution/workflow/#processus","title":"Processus","text":"<ol> <li>Cr\u00e9ation branche release</li> <li>Tests finaux</li> <li>Mise \u00e0 jour version</li> <li>Merge dans main</li> <li>Tag version</li> <li>D\u00e9ploiement</li> </ol>"},{"location":"developpement/contribution/workflow/#commandes","title":"Commandes","text":"<pre><code># Cr\u00e9ation release\ngit checkout -b release/1.2.0\n./scripts/update_version.sh 1.2.0\ngit commit -am \"chore: bump version to 1.2.0\"\n\n# Finalisation\ngit checkout main\ngit merge release/1.2.0\ngit tag -a v1.2.0 -m \"Version 1.2.0\"\ngit push origin main --tags\n</code></pre>"},{"location":"developpement/outils/cicd/","title":"CI/CD","text":""},{"location":"developpement/outils/cicd/#pipeline-github-actions","title":"Pipeline GitHub Actions","text":""},{"location":"developpement/outils/cicd/#workflow-principal","title":"Workflow principal","text":"<pre><code>name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y cmake libsfml-dev\n\n      - name: Build\n        run: |\n          mkdir build &amp;&amp; cd build\n          cmake ..\n          make\n\n      - name: Test\n        run: |\n          cd build\n          ctest --output-on-failure\n\n  analyze:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Static Analysis\n        run: |\n          cppcheck --enable=all src/\n\n      - name: Security Scan\n        uses: github/codeql-action/analyze@v1\n\n  deploy:\n    needs: [build, analyze]\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create Release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"developpement/outils/cicd/#configuration-jenkins","title":"Configuration Jenkins","text":""},{"location":"developpement/outils/cicd/#jenkinsfile","title":"Jenkinsfile","text":"<pre><code>pipeline {\n    agent any\n\n    environment {\n        BUILD_TYPE = 'Release'\n    }\n\n    stages {\n        stage('Build') {\n            steps {\n                sh '''\n                    mkdir -p build\n                    cd build\n                    cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ..\n                    make -j$(nproc)\n                '''\n            }\n        }\n\n        stage('Test') {\n            steps {\n                sh '''\n                    cd build\n                    ctest --output-on-failure\n                '''\n            }\n            post {\n                always {\n                    junit 'build/test-results/*.xml'\n                }\n            }\n        }\n\n        stage('Analysis') {\n            parallel {\n                stage('Static Analysis') {\n                    steps {\n                        sh 'cppcheck --xml --output-file=cppcheck-result.xml src/'\n                    }\n                }\n                stage('Coverage') {\n                    steps {\n                        sh '''\n                            cd build\n                            make coverage\n                        '''\n                    }\n                }\n            }\n        }\n\n        stage('Deploy') {\n            when {\n                branch 'main'\n            }\n            steps {\n                sh './scripts/deploy.sh'\n            }\n        }\n    }\n\n    post {\n        always {\n            cleanWs()\n        }\n    }\n}\n</code></pre>"},{"location":"developpement/outils/cicd/#configuration-gitlab-ci","title":"Configuration GitLab CI","text":""},{"location":"developpement/outils/cicd/#gitlab-ciyml","title":".gitlab-ci.yml","text":"<pre><code>stages:\n  - build\n  - test\n  - analyze\n  - deploy\n\nvariables:\n  BUILD_TYPE: Release\n\nbuild:\n  stage: build\n  script:\n    - mkdir -p build\n    - cd build\n    - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..\n    - make\n  artifacts:\n    paths:\n      - build/\n\ntest:\n  stage: test\n  script:\n    - cd build\n    - ctest --output-on-failure\n  artifacts:\n    reports:\n      junit: build/test-results/*.xml\n\nanalyze:\n  stage: analyze\n  script:\n    - cppcheck --enable=all src/\n    - cd build\n    - make coverage\n  artifacts:\n    reports:\n      coverage_report:\n        coverage_format: cobertura\n        path: coverage.xml\n\ndeploy:\n  stage: deploy\n  script:\n    - ./scripts/deploy.sh\n  only:\n    - main\n</code></pre>"},{"location":"developpement/outils/cicd/#deploiement-continu","title":"D\u00e9ploiement continu","text":""},{"location":"developpement/outils/cicd/#script-de-deploiement","title":"Script de d\u00e9ploiement","text":"<pre><code>#!/bin/bash\n\nVERSION=$(git describe --tags)\nDEPLOY_DIR=\"/var/www/jeu-de-vie\"\n\n# Pr\u00e9paration\nmkdir -p dist\ncp -r build/bin/* dist/\ncp -r assets dist/\ncp README.md LICENSE dist/\n\n# Cr\u00e9ation archive\ncd dist\ntar czf jeu-de-vie-$VERSION.tar.gz *\n\n# D\u00e9ploiement\nssh deploy@server \"mkdir -p $DEPLOY_DIR/$VERSION\"\nscp jeu-de-vie-$VERSION.tar.gz deploy@server:$DEPLOY_DIR/$VERSION/\nssh deploy@server \"cd $DEPLOY_DIR/$VERSION &amp;&amp; tar xzf jeu-de-vie-$VERSION.tar.gz\"\n\n# Mise \u00e0 jour lien symbolique\nssh deploy@server \"ln -sfn $DEPLOY_DIR/$VERSION $DEPLOY_DIR/current\"\n</code></pre>"},{"location":"developpement/outils/cicd/#monitoring","title":"Monitoring","text":""},{"location":"developpement/outils/cicd/#configuration-prometheus","title":"Configuration Prometheus","text":"<pre><code>global:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'jeu-de-vie'\n    static_configs:\n      - targets: ['localhost:9090']\n</code></pre>"},{"location":"developpement/outils/cicd/#configuration-grafana","title":"Configuration Grafana","text":"<pre><code>{\n  \"dashboard\": {\n    \"id\": null,\n    \"title\": \"Jeu de la Vie - Metrics\",\n    \"panels\": [\n      {\n        \"title\": \"Build Status\",\n        \"type\": \"graph\"\n      },\n      {\n        \"title\": \"Test Coverage\",\n        \"type\": \"gauge\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"developpement/outils/scripts/","title":"Scripts de d\u00e9veloppement","text":""},{"location":"developpement/outils/scripts/#scripts-de-build","title":"Scripts de build","text":""},{"location":"developpement/outils/scripts/#buildsh","title":"build.sh","text":"<pre><code>#!/bin/bash\n\n# Configuration du build\nBUILD_TYPE=${1:-Release}\nBUILD_DIR=\"build\"\n\n# Cr\u00e9ation du r\u00e9pertoire de build\nmkdir -p $BUILD_DIR\ncd $BUILD_DIR\n\n# Configuration CMake\ncmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..\n\n# Compilation\nmake -j$(nproc)\n\n# Tests si en mode Debug\nif [ \"$BUILD_TYPE\" = \"Debug\" ]; then\n    ctest --output-on-failure\nfi\n</code></pre>"},{"location":"developpement/outils/scripts/#cleansh","title":"clean.sh","text":"<pre><code>#!/bin/bash\n\n# Nettoyage des fichiers de build\nrm -rf build/\nrm -rf dist/\nfind . -name \"*.o\" -delete\nfind . -name \"*.gcno\" -delete\nfind . -name \"*.gcda\" -delete\n</code></pre>"},{"location":"developpement/outils/scripts/#scripts-de-validation","title":"Scripts de validation","text":""},{"location":"developpement/outils/scripts/#check_stylesh","title":"check_style.sh","text":"<pre><code>#!/bin/bash\n\n# V\u00e9rification du style de code\necho \"V\u00e9rification du style...\"\n\n# Clang-format\nfind src include -name \"*.cpp\" -o -name \"*.hpp\" | while read file; do\n    clang-format -style=file -i \"$file\"\ndone\n\n# V\u00e9rification des fins de ligne\nfind src include -type f -exec dos2unix {} \\;\n</code></pre>"},{"location":"developpement/outils/scripts/#static_analysissh","title":"static_analysis.sh","text":"<pre><code>#!/bin/bash\n\n# Analyse statique avec cppcheck\ncppcheck --enable=all \\\n         --suppress=missingIncludeSystem \\\n         --std=c++17 \\\n         src/ include/\n\n# Analyse avec clang-tidy\nfind src include -name \"*.cpp\" -o -name \"*.hpp\" | while read file; do\n    clang-tidy \"$file\" -checks=*,-fuchsia-*,-google-*\ndone\n</code></pre>"},{"location":"developpement/outils/scripts/#scripts-de-documentation","title":"Scripts de documentation","text":""},{"location":"developpement/outils/scripts/#generate_docssh","title":"generate_docs.sh","text":"<pre><code>#!/bin/bash\n\n# G\u00e9n\u00e9ration de la documentation\necho \"G\u00e9n\u00e9ration de la documentation...\"\n\n# Doxygen\ndoxygen Doxyfile\n\n# MkDocs\nmkdocs build\n\n# Rapport de couverture\nlcov --capture --directory . --output-file coverage.info\ngenhtml coverage.info --output-directory coverage\n</code></pre>"},{"location":"developpement/outils/scripts/#scripts-de-deploiement","title":"Scripts de d\u00e9ploiement","text":""},{"location":"developpement/outils/scripts/#packagesh","title":"package.sh","text":"<pre><code>#!/bin/bash\n\nVERSION=$(git describe --tags)\nPACKAGE_NAME=\"jeu-de-vie-$VERSION\"\n\n# Cr\u00e9ation de l'archive\nmkdir -p dist/$PACKAGE_NAME\ncp -r build/bin/* dist/$PACKAGE_NAME/\ncp -r assets dist/$PACKAGE_NAME/\ncp README.md LICENSE dist/$PACKAGE_NAME/\n\ncd dist\ntar czf $PACKAGE_NAME.tar.gz $PACKAGE_NAME\n</code></pre>"},{"location":"developpement/outils/scripts/#scripts-utilitaires","title":"Scripts utilitaires","text":""},{"location":"developpement/outils/scripts/#setup_devsh","title":"setup_dev.sh","text":"<pre><code>#!/bin/bash\n\n# Installation des d\u00e9pendances de d\u00e9veloppement\npip install -r requirements-dev.txt\n\n# Installation des hooks git\npre-commit install\n\n# Configuration de l'environnement\ngit config core.autocrlf input\ngit config commit.template .gitmessage\n\n# Installation des outils\nsudo apt install -y \\\n    clang-format \\\n    clang-tidy \\\n    cppcheck \\\n    lcov \\\n    doxygen\n</code></pre>"},{"location":"developpement/outils/scripts/#utilisation","title":"Utilisation","text":""},{"location":"developpement/outils/scripts/#installation","title":"Installation","text":"<pre><code># Rendre les scripts ex\u00e9cutables\nchmod +x scripts/*.sh\n\n# Configuration de l'environnement\n./scripts/setup_dev.sh\n</code></pre>"},{"location":"developpement/outils/scripts/#workflow-typique","title":"Workflow typique","text":"<p>```bash</p>"},{"location":"developpement/outils/scripts/#build-et-tests","title":"Build et tests","text":"<p>./scripts/build.sh Debug</p>"},{"location":"developpement/outils/scripts/#verification-du-code","title":"V\u00e9rification du code","text":"<p>./scripts/check_style.sh ./scripts/static_analysis.sh</p>"},{"location":"developpement/outils/scripts/#generation-documentation","title":"G\u00e9n\u00e9ration documentation","text":"<p>./scripts/generate_docs.sh</p>"},{"location":"developpement/outils/scripts/#creation-package","title":"Cr\u00e9ation package","text":"<p>./scripts/package.sh</p>"},{"location":"developpement/outils/tests/","title":"Outils de test","text":""},{"location":"developpement/outils/tests/#configuration-des-tests","title":"Configuration des tests","text":""},{"location":"developpement/outils/tests/#cmake","title":"CMake","text":"<pre><code># Tests configuration\nenable_testing()\nadd_subdirectory(tests)\n\n# Configuration de la couverture\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    include(CodeCoverage)\n    append_coverage_compiler_flags()\n    setup_target_for_coverage_lcov(\n        NAME coverage\n        EXECUTABLE ctest\n        DEPENDENCIES unit_tests integration_tests\n    )\nendif()\n</code></pre>"},{"location":"developpement/outils/tests/#catch2","title":"Catch2","text":"<pre><code>#define CATCH_CONFIG_MAIN\n#include &lt;catch2/catch.hpp&gt;\n\n// Configuration globale\nclass TestConfig {\npublic:\n    static void setup() {\n        // Configuration commune\n    }\n\n    static void teardown() {\n        // Nettoyage\n    }\n};\n</code></pre>"},{"location":"developpement/outils/tests/#outils-danalyse","title":"Outils d'analyse","text":""},{"location":"developpement/outils/tests/#valgrind","title":"Valgrind","text":"<pre><code>#!/bin/bash\n\n# V\u00e9rification des fuites m\u00e9moire\nvalgrind --leak-check=full \\\n         --show-leak-kinds=all \\\n         --track-origins=yes \\\n         --verbose \\\n         ./tests/unit_tests\n\n# Profilage\nvalgrind --tool=callgrind ./tests/benchmarks\n</code></pre>"},{"location":"developpement/outils/tests/#sanitizers","title":"Sanitizers","text":"<pre><code># Configuration CMake pour les sanitizers\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} \\\n    -fsanitize=address,undefined \\\n    -fno-omit-frame-pointer\")\n</code></pre>"},{"location":"developpement/outils/tests/#outils-de-couverture","title":"Outils de couverture","text":""},{"location":"developpement/outils/tests/#lcov","title":"LCOV","text":"<pre><code>#!/bin/bash\n\n# G\u00e9n\u00e9ration rapport de couverture\nlcov --capture --directory . \\\n     --output-file coverage.info\n\n# Filtrage des fichiers syst\u00e8me\nlcov --remove coverage.info '/usr/*' --output-file coverage.info\n\n# G\u00e9n\u00e9ration HTML\ngenhtml coverage.info --output-directory coverage\n</code></pre>"},{"location":"developpement/outils/tests/#gcovr","title":"gcovr","text":"<pre><code># Configuration XML pour Jenkins\ngcovr --xml coverage.xml \\\n      --filter src/ \\\n      --exclude-unreachable-branches\n</code></pre>"},{"location":"developpement/outils/tests/#outils-de-benchmark","title":"Outils de benchmark","text":""},{"location":"developpement/outils/tests/#google-benchmark","title":"Google Benchmark","text":"<pre><code>#include &lt;benchmark/benchmark.h&gt;\n\nstatic void BM_GridUpdate(benchmark::State&amp; state) {\n    Grid grid(state.range(0), state.range(0));\n    for (auto _ : state) {\n        grid.update();\n    }\n    state.SetComplexityN(state.range(0));\n}\n\nBENCHMARK(BM_GridUpdate)\n    -&gt;RangeMultiplier(2)\n    -&gt;Range(8, 1024)\n    -&gt;Complexity();\n</code></pre>"},{"location":"developpement/outils/tests/#integration-continue","title":"Int\u00e9gration continue","text":""},{"location":"developpement/outils/tests/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y cmake valgrind lcov\n\n      - name: Build and test\n        run: |\n          mkdir build &amp;&amp; cd build\n          cmake -DCMAKE_BUILD_TYPE=Debug ..\n          make\n          ctest --output-on-failure\n\n      - name: Generate coverage\n        run: |\n          make coverage\n          bash &lt;(curl -s https://codecov.io/bash)\n</code></pre>"},{"location":"developpement/outils/tests/#rapports-et-visualisation","title":"Rapports et visualisation","text":""},{"location":"developpement/outils/tests/#test-report","title":"Test Report","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;testsuites&gt;\n  &lt;testsuite name=\"GridTests\" tests=\"4\" failures=\"0\" errors=\"0\"&gt;\n    &lt;testcase name=\"Grid/Creation\" time=\"0.001\"/&gt;\n    &lt;testcase name=\"Grid/Update\" time=\"0.002\"/&gt;\n  &lt;/testsuite&gt;\n&lt;/testsuites&gt;\n</code></pre>"},{"location":"developpement/outils/tests/#benchmark-report","title":"Benchmark Report","text":"<pre><code>{\n  \"context\": {\n    \"date\": \"2024-03-15\",\n    \"host_name\": \"benchmark-server\"\n  },\n  \"benchmarks\": [\n    {\n      \"name\": \"BM_GridUpdate/8\",\n      \"iterations\": 1000,\n      \"real_time\": 100,\n      \"cpu_time\": 98\n    }\n  ]\n}\n</code></pre>"},{"location":"guide_utilisateur/installation/configuration/","title":"Configuration","text":""},{"location":"guide_utilisateur/installation/configuration/#variables-denvironnement","title":"Variables d'environnement","text":"<pre><code># Ajouter au ~/.bashrc ou ~/.zshrc\nexport GOL_DATA_DIR=/usr/local/share/jeu-de-vie\nexport GOL_CONFIG_FILE=$GOL_DATA_DIR/config/default.conf\n</code></pre>"},{"location":"guide_utilisateur/installation/configuration/#verification-de-linstallation","title":"V\u00e9rification de l'installation","text":""},{"location":"guide_utilisateur/installation/configuration/#test-rapide","title":"Test rapide","text":"<pre><code>./jeu-de-vie --version\n./jeu-de-vie --test\n</code></pre>"},{"location":"guide_utilisateur/installation/configuration/#execution-des-tests-unitaires","title":"Ex\u00e9cution des tests unitaires","text":"<pre><code>ctest --output-on-failure\n</code></pre>"},{"location":"guide_utilisateur/installation/configuration/#resolution-des-problemes-courants","title":"R\u00e9solution des probl\u00e8mes courants","text":""},{"location":"guide_utilisateur/installation/configuration/#erreurs-de-compilation","title":"Erreurs de compilation","text":"<ol> <li>CMake non trouv\u00e9 :</li> <li>V\u00e9rifier l'installation de CMake</li> <li> <p>Ajouter CMake au PATH</p> </li> <li> <p>SFML non trouv\u00e9 :    <pre><code>export SFML_ROOT=/chemin/vers/sfml\ncmake -DSFML_ROOT=/chemin/vers/sfml ..\n</code></pre></p> </li> <li> <p>Erreur de linkage :</p> </li> <li>V\u00e9rifier les versions des biblioth\u00e8ques</li> <li>Reconstruire le projet en mode Debug</li> </ol>"},{"location":"guide_utilisateur/installation/configuration/#problemes-dexecution","title":"Probl\u00e8mes d'ex\u00e9cution","text":"<ol> <li> <p>Biblioth\u00e8ques manquantes :    <pre><code># Linux\nexport LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n</code></pre></p> </li> <li> <p>Permissions insuffisantes :    <pre><code>chmod +x jeu-de-vie\nsudo chown $USER:$USER ~/.local/share/jeu-de-vie\n</code></pre></p> </li> </ol>"},{"location":"guide_utilisateur/installation/prerequisites/","title":"Pr\u00e9requis","text":""},{"location":"guide_utilisateur/installation/prerequisites/#systeme-dexploitation","title":"Syst\u00e8me d'exploitation","text":"<ul> <li>Linux : Ubuntu 18.04+ ou \u00e9quivalent</li> <li>macOS : 10.14+ (Mojave)</li> <li>Windows : 10+</li> </ul>"},{"location":"guide_utilisateur/installation/prerequisites/#outils-de-developpement","title":"Outils de d\u00e9veloppement","text":"<ul> <li>Compilateur C++ : GCC 8.0+ ou Clang 7.0+</li> <li>CMake : 3.10+</li> <li>Git : Derni\u00e8re version stable</li> </ul>"},{"location":"guide_utilisateur/installation/prerequisites/#bibliotheques","title":"Biblioth\u00e8ques","text":"<ul> <li>SFML : 2.5+</li> <li>Python : 3.8+ (pour les scripts)</li> </ul>"},{"location":"guide_utilisateur/installation/prerequisites/#installation-des-dependances","title":"Installation des d\u00e9pendances","text":""},{"location":"guide_utilisateur/installation/prerequisites/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code>sudo apt update\nsudo apt install build-essential cmake libsfml-dev git python3\n</code></pre>"},{"location":"guide_utilisateur/installation/prerequisites/#macos","title":"macOS","text":"<pre><code>brew install cmake sfml git python\n</code></pre>"},{"location":"guide_utilisateur/installation/prerequisites/#windows","title":"Windows","text":"<ol> <li>Installer MSYS2</li> <li>Dans le terminal MSYS2 : <pre><code>pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-sfml git python\n</code></pre></li> </ol>"},{"location":"guide_utilisateur/installation/setup/","title":"Installation","text":""},{"location":"guide_utilisateur/installation/setup/#recuperation-du-code-source","title":"R\u00e9cup\u00e9ration du code source","text":"<pre><code>git clone https://github.com/votre-repo/jeu-de-vie.git\ncd jeu-de-vie\n</code></pre>"},{"location":"guide_utilisateur/installation/setup/#configuration-du-projet","title":"Configuration du projet","text":"<pre><code>mkdir build\ncd build\ncmake ..\n</code></pre> <p>Options de configuration CMake : - <code>-DBUILD_TESTS=ON</code> : Active les tests unitaires - <code>-DBUILD_DOC=ON</code> : G\u00e9n\u00e8re la documentation - <code>-DCMAKE_BUILD_TYPE=Release</code> : Build en mode Release</p>"},{"location":"guide_utilisateur/installation/setup/#compilation","title":"Compilation","text":"<pre><code>make -j$(nproc)  # Linux/macOS\n# ou\nmingw32-make     # Windows\n</code></pre>"},{"location":"guide_utilisateur/installation/setup/#installation-optionnel","title":"Installation (optionnel)","text":"<pre><code>sudo make install  # Linux/macOS\n# ou\nmingw32-make install  # Windows\n</code></pre>"},{"location":"guide_utilisateur/modes/console/","title":"Mode Console","text":""},{"location":"guide_utilisateur/modes/console/#presentation","title":"Pr\u00e9sentation","text":"<p>Le mode console est une interface l\u00e9g\u00e8re et efficace, particuli\u00e8rement adapt\u00e9e pour : - L'ex\u00e9cution en environnement serveur - Les tests automatis\u00e9s - Les syst\u00e8mes sans interface graphique - Les performances optimales - Le d\u00e9bogage rapide</p>"},{"location":"guide_utilisateur/modes/console/#lancement","title":"Lancement","text":"<pre><code>./jeu-de-vie -c &lt;fichier_config&gt; [options]\n</code></pre>"},{"location":"guide_utilisateur/modes/console/#options-disponibles","title":"Options disponibles","text":"<ul> <li><code>-n &lt;iterations&gt;</code> : Nombre d'it\u00e9rations \u00e0 ex\u00e9cuter</li> <li><code>-d &lt;delai&gt;</code> : D\u00e9lai entre g\u00e9n\u00e9rations (ms)</li> <li><code>-o &lt;fichier&gt;</code> : Fichier de sortie</li> <li><code>-v</code> : Mode verbeux</li> <li><code>-q</code> : Mode silencieux</li> </ul>"},{"location":"guide_utilisateur/modes/console/#interface","title":"Interface","text":""},{"location":"guide_utilisateur/modes/console/#affichage","title":"Affichage","text":"<pre><code>G\u00e9n\u00e9ration: 42\nPopulation: 123\n[0][1][0][0][0]\n[0][1][1][0][0]\n[0][1][0][0][0]\n[0][0][0][0][0]\n</code></pre>"},{"location":"guide_utilisateur/modes/console/#commandes","title":"Commandes","text":"Touche Action n G\u00e9n\u00e9ration suivante p Pause/Reprise s Sauvegarder q Quitter r R\u00e9initialiser"},{"location":"guide_utilisateur/modes/console/#fonctionnalites-specifiques","title":"Fonctionnalit\u00e9s sp\u00e9cifiques","text":""},{"location":"guide_utilisateur/modes/console/#logs-et-debug","title":"Logs et d\u00e9bug","text":"<pre><code># Activation des logs d\u00e9taill\u00e9s\n./jeu-de-vie -c config.txt -v --log-level=debug\n</code></pre>"},{"location":"guide_utilisateur/modes/console/#export-des-resultats","title":"Export des r\u00e9sultats","text":"<pre><code># Export en CSV\n./jeu-de-vie -c config.txt -o resultats.csv\n\n# Export en format texte\n./jeu-de-vie -c config.txt -o resultats.txt\n</code></pre>"},{"location":"guide_utilisateur/modes/debug/","title":"Mode Debug","text":""},{"location":"guide_utilisateur/modes/debug/#presentation","title":"Pr\u00e9sentation","text":"<p>Le mode debug est con\u00e7u pour : - Analyser le comportement du jeu - D\u00e9tecter les anomalies - Optimiser les performances - Valider les r\u00e8gles d'\u00e9volution</p>"},{"location":"guide_utilisateur/modes/debug/#activation","title":"Activation","text":"<pre><code>./jeu-de-vie -d &lt;fichier_config&gt; [options]\n</code></pre>"},{"location":"guide_utilisateur/modes/debug/#options-de-debug","title":"Options de debug","text":"<ul> <li><code>--step</code> : Ex\u00e9cution pas \u00e0 pas</li> <li><code>--stats</code> : Affichage statistiques</li> <li><code>--trace</code> : Log d\u00e9taill\u00e9</li> <li><code>--profile</code> : Profilage</li> <li><code>--check</code> : Validation des r\u00e8gles</li> </ul>"},{"location":"guide_utilisateur/modes/debug/#fonctionnalites","title":"Fonctionnalit\u00e9s","text":""},{"location":"guide_utilisateur/modes/debug/#analyse-pas-a-pas","title":"Analyse pas \u00e0 pas","text":"<pre><code>[DEBUG] G\u00e9n\u00e9ration 42, Cellule (3,4)\n- Voisins vivants: 3\n- \u00c9tat actuel: mort\n- Prochain \u00e9tat: vivant\n- R\u00e8gle appliqu\u00e9e: naissance\n</code></pre>"},{"location":"guide_utilisateur/modes/debug/#statistiques-en-temps-reel","title":"Statistiques en temps r\u00e9el","text":"<ul> <li>Temps de calcul par g\u00e9n\u00e9ration</li> <li>Utilisation m\u00e9moire</li> <li>Nombre de cellules actives</li> <li>Points chauds d'activit\u00e9</li> </ul>"},{"location":"guide_utilisateur/modes/debug/#profilage","title":"Profilage","text":"<pre><code># Activation du profilage\n./jeu-de-vie -d config.txt --profile\n\n# R\u00e9sultats\nPerformance Report:\n- Update: 0.5ms\n- Render: 1.2ms\n- Memory: 24MB\n</code></pre>"},{"location":"guide_utilisateur/modes/debug/#outils-de-debogage","title":"Outils de d\u00e9bogage","text":""},{"location":"guide_utilisateur/modes/debug/#console-de-debug","title":"Console de debug","text":"<ul> <li>Commandes disponibles</li> <li>Inspection des \u00e9tats</li> <li>Modification en temps r\u00e9el</li> <li>Breakpoints</li> </ul>"},{"location":"guide_utilisateur/modes/debug/#logs","title":"Logs","text":"<p>Niveaux de log : - ERROR : Erreurs critiques - WARN : Avertissements - INFO : Informations g\u00e9n\u00e9rales - DEBUG : D\u00e9tails techniques - TRACE : Donn\u00e9es exhaustives</p>"},{"location":"guide_utilisateur/modes/graphique/","title":"Mode Graphique","text":""},{"location":"guide_utilisateur/modes/graphique/#presentation","title":"Pr\u00e9sentation","text":"<p>Le mode graphique offre une interface visuelle interactive permettant de : - Visualiser l'\u00e9volution en temps r\u00e9el - Interagir directement avec la grille - Observer les motifs \u00e9mergents - Modifier les param\u00e8tres dynamiquement</p>"},{"location":"guide_utilisateur/modes/graphique/#lancement","title":"Lancement","text":"<pre><code>./jeu-de-vie -g &lt;fichier_config&gt; [options]\n</code></pre>"},{"location":"guide_utilisateur/modes/graphique/#options-graphiques","title":"Options graphiques","text":"<ul> <li><code>-w &lt;largeur&gt;</code> : Largeur de la fen\u00eatre (d\u00e9faut: 800)</li> <li><code>-h &lt;hauteur&gt;</code> : Hauteur de la fen\u00eatre (d\u00e9faut: 600)</li> <li><code>-s &lt;taille&gt;</code> : Taille des cellules (d\u00e9faut: 10px)</li> <li><code>-f &lt;fps&gt;</code> : Limite de FPS (d\u00e9faut: 60)</li> </ul>"},{"location":"guide_utilisateur/modes/graphique/#interface-utilisateur","title":"Interface utilisateur","text":""},{"location":"guide_utilisateur/modes/graphique/#elements-dinterface","title":"\u00c9l\u00e9ments d'interface","text":"<ul> <li>Grille principale</li> <li>Barre d'outils</li> <li>Panneau de statistiques</li> <li>Menu des motifs</li> <li>Contr\u00f4les de simulation</li> </ul>"},{"location":"guide_utilisateur/modes/graphique/#controles","title":"Contr\u00f4les","text":"Action Commande Clic gauche Activer/d\u00e9sactiver cellule Clic droit Menu contextuel Molette Zoom in/out Espace Pause/Reprise R R\u00e9initialiser S Sauvegarder L Charger motif +/- Vitesse \u00c9chap Quitter"},{"location":"guide_utilisateur/modes/graphique/#fonctionnalites-avancees","title":"Fonctionnalit\u00e9s avanc\u00e9es","text":""},{"location":"guide_utilisateur/modes/graphique/#gestion-des-motifs","title":"Gestion des motifs","text":"<ol> <li>Appuyez sur L pour entrer en mode insertion</li> <li>S\u00e9lectionnez un motif (1-9)</li> <li>Positionnez avec la souris</li> <li>Clic gauche pour placer</li> </ol>"},{"location":"guide_utilisateur/modes/graphique/#motifs-disponibles","title":"Motifs disponibles","text":"<ul> <li>1: Glider</li> <li>2: Blinker</li> <li>3: Block</li> <li>4: Beehive</li> <li>5: Pulsar</li> </ul>"},{"location":"guide_utilisateur/modes/graphique/#personnalisation","title":"Personnalisation","text":"<ul> <li>Couleurs des cellules</li> <li>Grille d'affichage</li> <li>Vitesse d'animation</li> <li>Taille des cellules</li> </ul>"},{"location":"guide_utilisateur/utilisation/commands/","title":"Commandes","text":""},{"location":"guide_utilisateur/utilisation/commands/#commandes-de-base","title":"Commandes de base","text":""},{"location":"guide_utilisateur/utilisation/commands/#mode-console","title":"Mode Console","text":"Commande Description <code>n</code> Passer \u00e0 la g\u00e9n\u00e9ration suivante <code>p</code> Pause/Reprise de la simulation <code>s</code> Sauvegarder l'\u00e9tat actuel <code>q</code> Quitter le programme <code>r</code> R\u00e9initialiser la grille"},{"location":"guide_utilisateur/utilisation/commands/#mode-graphique","title":"Mode Graphique","text":"Touche Action Espace Pause/Reprise R R\u00e9initialiser S Sauvegarder L Charger motif +/- Ajuster la vitesse \u00c9chap Quitter"},{"location":"guide_utilisateur/utilisation/commands/#commandes-avancees","title":"Commandes avanc\u00e9es","text":""},{"location":"guide_utilisateur/utilisation/commands/#mode-debug","title":"Mode Debug","text":"Commande Description <code>--step</code> Ex\u00e9cution pas \u00e0 pas <code>--stats</code> Affichage des statistiques <code>--trace</code> Log d\u00e9taill\u00e9 des changements <code>--profile</code> Profilage des performances"},{"location":"guide_utilisateur/utilisation/commands/#raccourcis-clavier","title":"Raccourcis clavier","text":""},{"location":"guide_utilisateur/utilisation/commands/#personnalisation","title":"Personnalisation","text":"<ul> <li>Configurer les raccourcis : Acc\u00e9der aux param\u00e8tres pour personnaliser les raccourcis clavier</li> <li>Raccourcis par d\u00e9faut : R\u00e9initialiser les raccourcis aux valeurs par d\u00e9faut</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/","title":"Interface Utilisateur","text":""},{"location":"guide_utilisateur/utilisation/interface/#presentation","title":"Pr\u00e9sentation","text":"<p>L'interface utilisateur du Jeu de la Vie est con\u00e7ue pour \u00eatre intuitive et facile \u00e0 utiliser, permettant une interaction fluide avec le jeu.</p>"},{"location":"guide_utilisateur/utilisation/interface/#elements-de-linterface","title":"\u00c9l\u00e9ments de l'interface","text":""},{"location":"guide_utilisateur/utilisation/interface/#grille-de-jeu","title":"Grille de jeu","text":"<ul> <li>Affichage : Visualisation des cellules vivantes et mortes</li> <li>Interaction : Clic pour activer/d\u00e9sactiver les cellules</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#barre-doutils","title":"Barre d'outils","text":"<ul> <li>Contr\u00f4les : Boutons pour d\u00e9marrer, arr\u00eater, et r\u00e9initialiser la simulation</li> <li>Options : Acc\u00e8s aux param\u00e8tres de configuration</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#panneau-de-statistiques","title":"Panneau de statistiques","text":"<ul> <li>Informations : Affiche le nombre de g\u00e9n\u00e9rations, la population actuelle, et d'autres statistiques pertinentes</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#menu-des-motifs","title":"Menu des motifs","text":"<ul> <li>S\u00e9lection : Choix de motifs pr\u00e9d\u00e9finis pour insertion rapide</li> <li>Personnalisation : Options pour cr\u00e9er et sauvegarder des motifs personnalis\u00e9s</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#navigation","title":"Navigation","text":""},{"location":"guide_utilisateur/utilisation/interface/#acces-rapide","title":"Acc\u00e8s rapide","text":"<ul> <li>Raccourcis clavier : Utilisation de touches pour des actions rapides</li> <li>Menus contextuels : Clic droit pour acc\u00e9der \u00e0 des options suppl\u00e9mentaires</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#personnalisation","title":"Personnalisation","text":"<ul> <li>Th\u00e8mes : Choix entre diff\u00e9rents th\u00e8mes visuels</li> <li>Disposition : Ajustement de la disposition des \u00e9l\u00e9ments de l'interface</li> </ul>"},{"location":"guide_utilisateur/utilisation/patterns/","title":"Motifs Pr\u00e9d\u00e9finis","text":""},{"location":"guide_utilisateur/utilisation/patterns/#introduction","title":"Introduction","text":"<p>Les motifs pr\u00e9d\u00e9finis sont des configurations de cellules couramment utilis\u00e9es dans le Jeu de la Vie pour d\u00e9montrer des comportements int\u00e9ressants.</p>"},{"location":"guide_utilisateur/utilisation/patterns/#motifs-disponibles","title":"Motifs disponibles","text":""},{"location":"guide_utilisateur/utilisation/patterns/#oscillateurs","title":"Oscillateurs","text":"<ul> <li>Blinker : Un motif simple qui oscille entre deux \u00e9tats</li> <li>Pulsar : Un oscillateur plus complexe avec une p\u00e9riode de 3</li> </ul>"},{"location":"guide_utilisateur/utilisation/patterns/#vaisseaux","title":"Vaisseaux","text":"<ul> <li>Glider : Un petit motif qui se d\u00e9place en diagonale \u00e0 travers la grille</li> <li>Lightweight Spaceship (LWSS) : Un vaisseau plus grand qui se d\u00e9place horizontalement</li> </ul>"},{"location":"guide_utilisateur/utilisation/patterns/#structures-stables","title":"Structures stables","text":"<ul> <li>Block : Un carr\u00e9 de 2x2 cellules vivantes qui reste stable</li> <li>Beehive : Une structure hexagonale stable</li> </ul>"},{"location":"guide_utilisateur/utilisation/patterns/#insertion-de-motifs","title":"Insertion de motifs","text":""},{"location":"guide_utilisateur/utilisation/patterns/#mode-graphique","title":"Mode Graphique","text":"<ol> <li>S\u00e9lection : Appuyez sur L pour entrer en mode insertion</li> <li>Choix : S\u00e9lectionnez un motif avec les touches 1-9</li> <li>Positionnement : Utilisez la souris pour positionner le motif</li> <li>Placement : Clic gauche pour placer le motif</li> </ol>"},{"location":"guide_utilisateur/utilisation/patterns/#mode-console","title":"Mode Console","text":"<ul> <li>Commande : Utilisez la commande <code>load &lt;nom_motif&gt;</code> pour charger un motif</li> </ul>"},{"location":"guide_utilisateur/utilisation/patterns/#creation-de-motifs-personnalises","title":"Cr\u00e9ation de motifs personnalis\u00e9s","text":""},{"location":"guide_utilisateur/utilisation/patterns/#interface-graphique","title":"Interface graphique","text":"<ul> <li>\u00c9diteur de motifs : Utilisez l'\u00e9diteur int\u00e9gr\u00e9 pour cr\u00e9er et sauvegarder vos propres motifs</li> </ul>"},{"location":"guide_utilisateur/utilisation/patterns/#fichier-de-configuration","title":"Fichier de configuration","text":"<ul> <li>Format : Cr\u00e9ez un fichier texte avec la configuration souhait\u00e9e</li> <li>Chargement : Utilisez la commande <code>load &lt;fichier&gt;</code> pour charger le motif</li> </ul>"},{"location":"support/contact/","title":"Contact et Support","text":""},{"location":"support/contact/#canaux-de-communication","title":"Canaux de communication","text":""},{"location":"support/contact/#support-technique","title":"Support technique","text":"<ul> <li>Email : support@jeudelavie.org</li> <li>Discord : Serveur Discord</li> <li>Forum : Forum communautaire</li> </ul>"},{"location":"support/contact/#developpement","title":"D\u00e9veloppement","text":"<ul> <li>GitHub : D\u00e9p\u00f4t du projet</li> <li>Issues : Tracker de bugs</li> <li>Discussions : Discussions GitHub</li> </ul>"},{"location":"support/contact/#signalement-de-bugs","title":"Signalement de bugs","text":""},{"location":"support/contact/#format-de-rapport","title":"Format de rapport","text":"<pre><code>## Description du bug\n[Description claire et concise]\n\n## \u00c9tapes de reproduction\n1. [Premi\u00e8re \u00e9tape]\n2. [Deuxi\u00e8me \u00e9tape]\n3. [etc...]\n\n## Comportement attendu\n[Description]\n\n## Comportement actuel\n[Description]\n\n## Environnement\n- OS: [ex: Ubuntu 20.04]\n- Version: [ex: 1.2.0]\n- Mat\u00e9riel: [si pertinent]\n\n## Logs\n```[logs pertinents]```\n</code></pre>"},{"location":"support/contact/#ou-signaler","title":"O\u00f9 signaler","text":"<ol> <li>GitHub Issues pour les bugs</li> <li>Discussions pour les questions</li> <li>Discord pour l'aide rapide</li> </ol>"},{"location":"support/contact/#contribution","title":"Contribution","text":""},{"location":"support/contact/#guide-de-contribution","title":"Guide de contribution","text":"<ol> <li>Fork le projet</li> <li>Cr\u00e9er une branche</li> <li>Faire les modifications</li> <li>Soumettre une PR</li> </ol>"},{"location":"support/contact/#code-de-conduite","title":"Code de conduite","text":"<ul> <li>Respect mutuel</li> <li>Communication constructive</li> <li>Documentation claire</li> <li>Tests appropri\u00e9s</li> </ul>"},{"location":"support/contact/#communaute","title":"Communaut\u00e9","text":""},{"location":"support/contact/#evenements","title":"\u00c9v\u00e9nements","text":"<ul> <li>R\u00e9unions mensuelles</li> <li>Hackathons</li> <li>Webinaires</li> </ul>"},{"location":"support/contact/#ressources","title":"Ressources","text":"<ul> <li>Wiki</li> <li>Tutoriels</li> <li>Exemples de code</li> <li>Documentation API</li> </ul>"},{"location":"support/contact/#equipe","title":"\u00c9quipe","text":""},{"location":"support/contact/#mainteneurs","title":"Mainteneurs","text":"<ul> <li>Lead Developer : [Nom]</li> <li>Core Team : [Liste]</li> <li>Community Managers : [Liste]</li> </ul>"},{"location":"support/contact/#contributeurs","title":"Contributeurs","text":"<ul> <li>Liste des contributeurs actifs</li> <li>Hall of Fame</li> <li>Remerciements sp\u00e9ciaux</li> </ul>"},{"location":"support/contact/#liens-utiles","title":"Liens utiles","text":""},{"location":"support/contact/#documentation","title":"Documentation","text":"<ul> <li>Guide utilisateur</li> <li>Documentation technique</li> <li>FAQ</li> </ul>"},{"location":"support/contact/#ressources-externes","title":"Ressources externes","text":"<ul> <li>[Articles scientifiques]</li> <li>[Tutoriels vid\u00e9o]</li> <li>[Publications]</li> </ul>"},{"location":"support/faq/","title":"Foire Aux Questions (FAQ)","text":""},{"location":"support/faq/#questions-generales","title":"Questions g\u00e9n\u00e9rales","text":""},{"location":"support/faq/#q-quest-ce-que-le-jeu-de-la-vie","title":"Q: Qu'est-ce que le Jeu de la Vie ?","text":"<p>R: Le Jeu de la Vie est un automate cellulaire cr\u00e9\u00e9 par John Conway en 1970. Il simule l'\u00e9volution de cellules selon des r\u00e8gles simples de naissance, survie et mort.</p>"},{"location":"support/faq/#q-quelles-sont-les-regles-de-base","title":"Q: Quelles sont les r\u00e8gles de base ?","text":"<p>R: Les r\u00e8gles sont : 1. Une cellule morte avec exactement 3 voisines vivantes na\u00eet 2. Une cellule vivante avec 2 ou 3 voisines vivantes survit 3. Dans tous les autres cas, la cellule meurt ou reste morte</p>"},{"location":"support/faq/#installation","title":"Installation","text":""},{"location":"support/faq/#q-comment-installer-sur-linux","title":"Q: Comment installer sur Linux ?","text":"<p>R: Suivez ces \u00e9tapes : <pre><code># Installation des d\u00e9pendances\nsudo apt install build-essential cmake libsfml-dev\n\n# Compilation\ngit clone https://github.com/votre-repo/jeu-de-vie.git\ncd jeu-de-vie\nmkdir build &amp;&amp; cd build\ncmake ..\nmake\n</code></pre></p>"},{"location":"support/faq/#q-linstallation-echoue-que-faire","title":"Q: L'installation \u00e9choue, que faire ?","text":"<p>R: V\u00e9rifiez : 1. Les d\u00e9pendances sont correctement install\u00e9es 2. La version de CMake (3.10+ requise) 3. Les logs d'erreur dans <code>build/CMakeFiles/CMakeError.log</code></p>"},{"location":"support/faq/#utilisation","title":"Utilisation","text":""},{"location":"support/faq/#q-comment-charger-un-motif-personnalise","title":"Q: Comment charger un motif personnalis\u00e9 ?","text":"<p>R: Deux m\u00e9thodes : 1. Via l'interface graphique : Menu \u2192 Charger \u2192 S\u00e9lectionner fichier 2. Via la ligne de commande : <code>./jeu-de-vie -p motif.gol</code></p>"},{"location":"support/faq/#q-comment-ajuster-la-vitesse-de-simulation","title":"Q: Comment ajuster la vitesse de simulation ?","text":"<p>R:  - Mode graphique : Touches +/- ou molette de la souris - Mode console : Options <code>-s &lt;vitesse&gt;</code> au lancement</p>"},{"location":"support/faq/#problemes-courants","title":"Probl\u00e8mes courants","text":""},{"location":"support/faq/#q-le-jeu-est-lent-comment-loptimiser","title":"Q: Le jeu est lent, comment l'optimiser ?","text":"<p>R: Essayez : 1. R\u00e9duire la taille de la grille 2. D\u00e9sactiver les effets graphiques 3. Utiliser le mode console pour les grandes simulations 4. Compiler en mode Release</p>"},{"location":"support/faq/#q-les-motifs-ne-saffichent-pas-correctement","title":"Q: Les motifs ne s'affichent pas correctement ?","text":"<p>R: V\u00e9rifiez : 1. Le format du fichier de motif 2. La taille de la grille 3. La position initiale du motif 4. Les param\u00e8tres d'affichage</p>"},{"location":"support/faq/#developpement","title":"D\u00e9veloppement","text":""},{"location":"support/faq/#q-comment-contribuer-au-projet","title":"Q: Comment contribuer au projet ?","text":"<p>R: Vous pouvez : 1. Fork le d\u00e9p\u00f4t 2. Cr\u00e9er une branche pour votre fonctionnalit\u00e9 3. Suivre les guides de contribution 4. Soumettre une Pull Request</p>"},{"location":"support/faq/#q-comment-ajouter-un-nouveau-renderer","title":"Q: Comment ajouter un nouveau renderer ?","text":"<p>R:  1. Cr\u00e9er une classe h\u00e9ritant de <code>IRenderer</code> 2. Impl\u00e9menter les m\u00e9thodes requises 3. Ajouter les tests unitaires 4. Mettre \u00e0 jour la factory de renderers</p>"},{"location":"support/faq/#performance","title":"Performance","text":""},{"location":"support/faq/#q-quelle-est-la-taille-maximale-recommandee","title":"Q: Quelle est la taille maximale recommand\u00e9e ?","text":"<p>R:  - Mode graphique : 1000x1000 cellules - Mode console : 5000x5000 cellules - Mode debug : D\u00e9pend de la m\u00e9moire disponible</p>"},{"location":"support/faq/#q-comment-ameliorer-les-performances","title":"Q: Comment am\u00e9liorer les performances ?","text":"<p>R:  1. Utiliser la compilation optimis\u00e9e 2. Activer le multithreading 3. Ajuster les param\u00e8tres de rendu 4. Utiliser le mode appropri\u00e9</p>"},{"location":"support/faq/#sauvegarde-et-chargement","title":"Sauvegarde et chargement","text":""},{"location":"support/faq/#q-ou-sont-stockees-les-sauvegardes","title":"Q: O\u00f9 sont stock\u00e9es les sauvegardes ?","text":"<p>R: Par d\u00e9faut dans : - Linux : <code>~/.local/share/jeu-de-vie/saves/</code> - Windows : <code>%APPDATA%\\jeu-de-vie\\saves\\</code> - macOS : <code>~/Library/Application Support/jeu-de-vie/saves/</code></p>"},{"location":"support/faq/#q-quel-format-de-fichier-est-utilise","title":"Q: Quel format de fichier est utilis\u00e9 ?","text":"<p>R: Les fichiers utilisent : - <code>.gol</code> pour les motifs - <code>.save</code> pour les sauvegardes de partie - <code>.conf</code> pour la configuration</p>"},{"location":"support/troubleshooting/","title":"Guide de d\u00e9pannage","text":""},{"location":"support/troubleshooting/#problemes-dinstallation","title":"Probl\u00e8mes d'installation","text":""},{"location":"support/troubleshooting/#erreurs-de-compilation","title":"Erreurs de compilation","text":""},{"location":"support/troubleshooting/#cmake-non-trouve","title":"CMake non trouv\u00e9","text":"<pre><code># Erreur\nCMake not found\n\n# Solution\nsudo apt install cmake  # Ubuntu/Debian\nbrew install cmake     # macOS\n</code></pre>"},{"location":"support/troubleshooting/#sfml-manquant","title":"SFML manquant","text":"<pre><code># Erreur\nCould not find SFML\n\n# Solution\nsudo apt install libsfml-dev  # Ubuntu/Debian\nbrew install sfml            # macOS\n</code></pre>"},{"location":"support/troubleshooting/#erreurs-de-linkage","title":"Erreurs de linkage","text":""},{"location":"support/troubleshooting/#bibliotheques-manquantes","title":"Biblioth\u00e8ques manquantes","text":"<pre><code># Erreur\nerror while loading shared libraries\n\n# Solution\nexport LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\nsudo ldconfig\n</code></pre>"},{"location":"support/troubleshooting/#problemes-dexecution","title":"Probl\u00e8mes d'ex\u00e9cution","text":""},{"location":"support/troubleshooting/#erreurs-graphiques","title":"Erreurs graphiques","text":""},{"location":"support/troubleshooting/#ecran-noir","title":"\u00c9cran noir","text":"<ol> <li>V\u00e9rifier les pilotes graphiques</li> <li>Tester diff\u00e9rentes r\u00e9solutions</li> <li>V\u00e9rifier les logs dans <code>~/.local/share/jeu-de-vie/logs/</code></li> </ol>"},{"location":"support/troubleshooting/#artefacts-visuels","title":"Artefacts visuels","text":"<ol> <li>Mettre \u00e0 jour les pilotes graphiques</li> <li>D\u00e9sactiver les effets visuels</li> <li>R\u00e9duire la r\u00e9solution</li> </ol>"},{"location":"support/troubleshooting/#problemes-de-performance","title":"Probl\u00e8mes de performance","text":""},{"location":"support/troubleshooting/#ralentissements","title":"Ralentissements","text":"<ol> <li>V\u00e9rifier l'utilisation CPU/RAM</li> <li>R\u00e9duire la taille de la grille</li> <li>Utiliser le mode console</li> <li>Activer le mode performance</li> </ol>"},{"location":"support/troubleshooting/#fuites-memoire","title":"Fuites m\u00e9moire","text":"<ol> <li>V\u00e9rifier les logs</li> <li>R\u00e9duire la taille des sauvegardes</li> <li>Nettoyer le cache</li> </ol>"},{"location":"support/troubleshooting/#problemes-de-sauvegarde","title":"Probl\u00e8mes de sauvegarde","text":""},{"location":"support/troubleshooting/#fichiers-corrompus","title":"Fichiers corrompus","text":"<ol> <li>V\u00e9rifier les permissions</li> <li>Utiliser la sauvegarde automatique</li> <li>Restaurer depuis la backup</li> </ol>"},{"location":"support/troubleshooting/#erreurs-dacces","title":"Erreurs d'acc\u00e8s","text":"<pre><code># V\u00e9rifier les permissions\nls -l ~/.local/share/jeu-de-vie/\n\n# Corriger les permissions\nchmod -R u+rw ~/.local/share/jeu-de-vie/\n</code></pre>"},{"location":"support/troubleshooting/#outils-de-diagnostic","title":"Outils de diagnostic","text":""},{"location":"support/troubleshooting/#logs-systeme","title":"Logs syst\u00e8me","text":"<pre><code># Afficher les logs\ntail -f ~/.local/share/jeu-de-vie/logs/error.log\n\n# Filtrer les erreurs\ngrep \"ERROR\" ~/.local/share/jeu-de-vie/logs/error.log\n</code></pre>"},{"location":"support/troubleshooting/#tests-de-diagnostic","title":"Tests de diagnostic","text":"<pre><code># Test syst\u00e8me\n./jeu-de-vie --diagnose\n\n# Test graphique\n./jeu-de-vie --test-renderer\n\n# Test performance\n./jeu-de-vie --benchmark\n</code></pre>"},{"location":"support/troubleshooting/#solutions-communes","title":"Solutions communes","text":""},{"location":"support/troubleshooting/#reinitialisation","title":"R\u00e9initialisation","text":"<ol> <li>Sauvegarder les donn\u00e9es importantes</li> <li>Supprimer les fichiers de configuration</li> <li>R\u00e9installer l'application</li> </ol>"},{"location":"support/troubleshooting/#mise-a-jour","title":"Mise \u00e0 jour","text":"<ol> <li>Mettre \u00e0 jour le syst\u00e8me</li> <li>Mettre \u00e0 jour les d\u00e9pendances</li> <li>Recompiler l'application</li> </ol>"},{"location":"support/troubleshooting/#contact-support","title":"Contact support","text":""},{"location":"support/troubleshooting/#rapport-de-bug","title":"Rapport de bug","text":"<ol> <li>Description du probl\u00e8me</li> <li>\u00c9tapes de reproduction</li> <li>Logs syst\u00e8me</li> <li>Configuration syst\u00e8me</li> </ol>"},{"location":"support/troubleshooting/#demande-daide","title":"Demande d'aide","text":"<ul> <li>Forum : [lien]</li> <li>Email : support@example.com</li> <li>Discord : [lien]</li> </ul>"},{"location":"technique/api/core/","title":"Core API","text":""},{"location":"technique/api/core/#grid","title":"Grid","text":""},{"location":"technique/api/core/#classe-grid","title":"Classe Grid","text":"<p>Interface principale pour la gestion de la grille du jeu.</p> <pre><code>class Grid {\npublic:\n    // Constructeurs\n    Grid(int width, int height);\n    Grid(const Grid&amp; other);\n\n    // M\u00e9thodes principales\n    void update();\n    bool getCellState(int x, int y) const;\n    void setCellState(int x, int y, bool state);\n\n    // Accesseurs\n    int getWidth() const;\n    int getHeight() const;\n    size_t getPopulation() const;\n\n    // It\u00e9rateurs\n    GridIterator begin();\n    GridIterator end();\n\n    // Gestion des observateurs\n    void addObserver(IObserver* observer);\n    void removeObserver(IObserver* observer);\n\nprivate:\n    vector&lt;Cell&gt; cells;\n    int width, height;\n    vector&lt;IObserver*&gt; observers;\n};\n</code></pre>"},{"location":"technique/api/core/#classe-cell","title":"Classe Cell","text":"<p>Repr\u00e9sentation d'une cellule individuelle.</p> <pre><code>class Cell {\npublic:\n    Cell(int x, int y, bool alive = false);\n\n    bool isAlive() const;\n    void setAlive(bool state);\n    bool evolve(int neighbors);\n\n    int getX() const;\n    int getY() const;\n\nprivate:\n    bool alive;\n    int x, y;\n};\n</code></pre>"},{"location":"technique/api/core/#utilisation","title":"Utilisation","text":""},{"location":"technique/api/core/#creation-et-initialisation","title":"Cr\u00e9ation et initialisation","text":"<pre><code>// Cr\u00e9ation d'une grille\nGrid grid(100, 100);\n\n// Initialisation de cellules\ngrid.setCellState(50, 50, true);\ngrid.setCellState(51, 50, true);\ngrid.setCellState(52, 50, true);\n</code></pre>"},{"location":"technique/api/core/#mise-a-jour-et-evolution","title":"Mise \u00e0 jour et \u00e9volution","text":"<pre><code>// Mise \u00e0 jour d'une g\u00e9n\u00e9ration\ngrid.update();\n\n// V\u00e9rification de l'\u00e9tat\nbool isAlive = grid.getCellState(50, 50);\nsize_t population = grid.getPopulation();\n</code></pre>"},{"location":"technique/api/core/#iteration-sur-la-grille","title":"It\u00e9ration sur la grille","text":"<pre><code>// Parcours de toutes les cellules\nfor (auto it = grid.begin(); it != grid.end(); ++it) {\n    Cell&amp; cell = *it;\n    // Traitement de la cellule\n}\n</code></pre>"},{"location":"technique/api/core/#exemples","title":"Exemples","text":""},{"location":"technique/api/core/#configuration-dun-glider","title":"Configuration d'un glider","text":"<pre><code>void setupGlider(Grid&amp; grid, int startX, int startY) {\n    grid.setCellState(startX, startY+1, true);\n    grid.setCellState(startX+1, startY+2, true);\n    grid.setCellState(startX+2, startY, true);\n    grid.setCellState(startX+2, startY+1, true);\n    grid.setCellState(startX+2, startY+2, true);\n}\n</code></pre>"},{"location":"technique/api/core/#gestion-des-observateurs","title":"Gestion des observateurs","text":"<pre><code>class PopulationCounter : public IObserver {\npublic:\n    void update(const Grid&amp; grid) override {\n        population = grid.getPopulation();\n    }\nprivate:\n    size_t population;\n};\n\n// Utilisation\nGrid grid(100, 100);\nPopulationCounter counter;\ngrid.addObserver(&amp;counter);\n</code></pre>"},{"location":"technique/api/renderer/","title":"Renderer API","text":""},{"location":"technique/api/renderer/#interfaces-de-rendu","title":"Interfaces de rendu","text":""},{"location":"technique/api/renderer/#irenderer","title":"IRenderer","text":"<p>Interface de base pour tous les renderers.</p> <pre><code>class IRenderer {\npublic:\n    virtual ~IRenderer() = default;\n\n    // M\u00e9thodes principales\n    virtual void render(const Grid&amp; grid) = 0;\n    virtual void clear() = 0;\n    virtual void update() = 0;\n\n    // Configuration\n    virtual void setScale(float scale) = 0;\n    virtual void setColor(Color cellColor) = 0;\n    virtual void setGridLines(bool show) = 0;\n};\n</code></pre>"},{"location":"technique/api/renderer/#consolerenderer","title":"ConsoleRenderer","text":"<p>Impl\u00e9mentation pour l'affichage console.</p> <pre><code>class ConsoleRenderer : public IRenderer {\npublic:\n    ConsoleRenderer(int width, int height);\n\n    void render(const Grid&amp; grid) override;\n    void clear() override;\n    void update() override;\n\n    // Options sp\u00e9cifiques console\n    void setSymbols(char alive, char dead);\n    void setColorMode(bool enabled);\n\nprivate:\n    char aliveSymbol;\n    char deadSymbol;\n    bool colorEnabled;\n};\n</code></pre>"},{"location":"technique/api/renderer/#graphicrenderer","title":"GraphicRenderer","text":"<p>Impl\u00e9mentation pour l'affichage graphique SFML.</p> <pre><code>class GraphicRenderer : public IRenderer {\npublic:\n    GraphicRenderer(sf::RenderWindow&amp; window);\n\n    void render(const Grid&amp; grid) override;\n    void clear() override;\n    void update() override;\n\n    // Options graphiques\n    void setZoom(float level);\n    void setPan(float x, float y);\n    void setTheme(Theme theme);\n\nprivate:\n    sf::RenderWindow&amp; window;\n    float zoom;\n    Vector2f pan;\n};\n</code></pre>"},{"location":"technique/api/renderer/#utilisation","title":"Utilisation","text":""},{"location":"technique/api/renderer/#configuration-de-base","title":"Configuration de base","text":"<pre><code>// Console\nauto renderer = make_unique&lt;ConsoleRenderer&gt;(80, 24);\nrenderer-&gt;setSymbols('\u25a0', '\u25a1');\nrenderer-&gt;setColorMode(true);\n\n// Graphique\nsf::RenderWindow window(sf::VideoMode(800, 600), \"Game of Life\");\nauto renderer = make_unique&lt;GraphicRenderer&gt;(window);\nrenderer-&gt;setScale(2.0f);\nrenderer-&gt;setGridLines(true);\n</code></pre>"},{"location":"technique/api/renderer/#cycle-de-rendu","title":"Cycle de rendu","text":"<pre><code>void GameLoop::render() {\n    renderer-&gt;clear();\n    renderer-&gt;render(grid);\n    renderer-&gt;update();\n}\n</code></pre>"},{"location":"technique/api/renderer/#themes-et-personnalisation","title":"Th\u00e8mes et personnalisation","text":""},{"location":"technique/api/renderer/#structure-theme","title":"Structure Theme","text":"<pre><code>struct Theme {\n    Color backgroundColor;\n    Color cellColor;\n    Color gridColor;\n    float gridThickness;\n    float cellPadding;\n};\n</code></pre>"},{"location":"technique/api/renderer/#exemples-de-themes","title":"Exemples de th\u00e8mes","text":"<pre><code>// Th\u00e8me clair\nTheme lightTheme {\n    .backgroundColor = Color::White,\n    .cellColor = Color::Black,\n    .gridColor = Color::Gray,\n    .gridThickness = 1.0f,\n    .cellPadding = 1.0f\n};\n\n// Th\u00e8me sombre\nTheme darkTheme {\n    .backgroundColor = Color::Black,\n    .cellColor = Color::Green,\n    .gridColor = Color(50, 50, 50),\n    .gridThickness = 1.0f,\n    .cellPadding = 1.0f\n};\n</code></pre>"},{"location":"technique/api/utils/","title":"Utils API","text":""},{"location":"technique/api/utils/#configuration","title":"Configuration","text":""},{"location":"technique/api/utils/#configmanager","title":"ConfigManager","text":"<p>Gestionnaire de configuration global.</p> <pre><code>class ConfigManager {\npublic:\n    static ConfigManager&amp; getInstance();\n\n    // Chargement/Sauvegarde\n    void loadFromFile(const string&amp; path);\n    void saveToFile(const string&amp; path);\n\n    // Accesseurs\n    template&lt;typename T&gt;\n    T getValue(const string&amp; key, const T&amp; defaultValue = T());\n\n    template&lt;typename T&gt;\n    void setValue(const string&amp; key, const T&amp; value);\n\nprivate:\n    static ConfigManager instance;\n    map&lt;string, variant&lt;int, float, string, bool&gt;&gt; values;\n};\n</code></pre>"},{"location":"technique/api/utils/#logging","title":"Logging","text":""},{"location":"technique/api/utils/#logger","title":"Logger","text":"<p>Syst\u00e8me de logging avec diff\u00e9rents niveaux.</p> <pre><code>class Logger {\npublic:\n    enum Level { DEBUG, INFO, WARN, ERROR };\n\n    static void setLevel(Level level);\n    static void setOutput(const string&amp; path);\n\n    template&lt;typename... Args&gt;\n    static void debug(const char* format, Args... args);\n\n    template&lt;typename... Args&gt;\n    static void info(const char* format, Args... args);\n\n    template&lt;typename... Args&gt;\n    static void warn(const char* format, Args... args);\n\n    template&lt;typename... Args&gt;\n    static void error(const char* format, Args... args);\n};\n</code></pre>"},{"location":"technique/api/utils/#patterns","title":"Patterns","text":""},{"location":"technique/api/utils/#pattern-manager","title":"Pattern Manager","text":"<p>Gestionnaire des motifs pr\u00e9d\u00e9finis.</p> <pre><code>class PatternManager {\npublic:\n    // Chargement/Sauvegarde\n    void loadFromDirectory(const string&amp; path);\n    void savePattern(const string&amp; name, const Pattern&amp; pattern);\n\n    // Acc\u00e8s aux motifs\n    Pattern getPattern(const string&amp; name);\n    vector&lt;string&gt; getAvailablePatterns() const;\n\n    // Validation\n    bool isValidPattern(const Pattern&amp; pattern) const;\n\nprivate:\n    map&lt;string, Pattern&gt; patterns;\n};\n</code></pre>"},{"location":"technique/api/utils/#utilitaires","title":"Utilitaires","text":""},{"location":"technique/api/utils/#fileutils","title":"FileUtils","text":"<p>Fonctions utilitaires pour la gestion des fichiers.</p> <pre><code>namespace FileUtils {\n    bool exists(const string&amp; path);\n    string readFile(const string&amp; path);\n    void writeFile(const string&amp; path, const string&amp; content);\n    vector&lt;string&gt; listFiles(const string&amp; directory);\n}\n</code></pre>"},{"location":"technique/api/utils/#stringutils","title":"StringUtils","text":"<p>Fonctions de manipulation de cha\u00eenes.</p> <pre><code>namespace StringUtils {\n    vector&lt;string&gt; split(const string&amp; str, char delim);\n    string trim(const string&amp; str);\n    string format(const char* fmt, ...);\n}\n</code></pre>"},{"location":"technique/api/utils/#exemples-dutilisation","title":"Exemples d'utilisation","text":""},{"location":"technique/api/utils/#configuration_1","title":"Configuration","text":"<pre><code>// Acc\u00e8s \u00e0 la configuration\nauto&amp; config = ConfigManager::getInstance();\nconfig.setValue(\"grid.width\", 100);\nconfig.setValue(\"grid.height\", 100);\nconfig.setValue(\"render.scale\", 2.0f);\n\n// Lecture des valeurs\nint width = config.getValue&lt;int&gt;(\"grid.width\");\nfloat scale = config.getValue&lt;float&gt;(\"render.scale\", 1.0f);\n</code></pre>"},{"location":"technique/api/utils/#logging_1","title":"Logging","text":"<pre><code>// Configuration du logger\nLogger::setLevel(Logger::INFO);\nLogger::setOutput(\"game.log\");\n\n// Utilisation\nLogger::info(\"D\u00e9marrage du jeu\");\nLogger::debug(\"Grid size: %dx%d\", width, height);\nLogger::error(\"Erreur lors du chargement: %s\", error.what());\n</code></pre>"},{"location":"technique/api/utils/#gestion-des-motifs","title":"Gestion des motifs","text":"<pre><code>// Chargement des motifs\nPatternManager patterns;\npatterns.loadFromDirectory(\"patterns/\");\n\n// Utilisation\nauto glider = patterns.getPattern(\"glider\");\ngrid.applyPattern(glider, 10, 10);\n</code></pre>"},{"location":"technique/architecture/components/","title":"Composants du syst\u00e8me","text":""},{"location":"technique/architecture/components/#core","title":"Core","text":""},{"location":"technique/architecture/components/#grid","title":"Grid","text":"<pre><code>class Grid {\n    vector&lt;Cell&gt; cells;\n    int width, height;\npublic:\n    void update();\n    Cell&amp; getCell(int x, int y);\n    void setCellState(int x, int y, bool state);\n};\n</code></pre>"},{"location":"technique/architecture/components/#cell","title":"Cell","text":"<pre><code>class Cell {\n    bool alive;\n    int x, y;\npublic:\n    bool evolve(int neighbors);\n    bool isAlive() const;\n};\n</code></pre>"},{"location":"technique/architecture/components/#renderers","title":"Renderers","text":""},{"location":"technique/architecture/components/#interface-de-rendu","title":"Interface de rendu","text":"<pre><code>class IRenderer {\npublic:\n    virtual void render(const Grid&amp; grid) = 0;\n    virtual void clear() = 0;\n    virtual void update() = 0;\n};\n</code></pre>"},{"location":"technique/architecture/components/#implementations","title":"Impl\u00e9mentations","text":"<ul> <li>ConsoleRenderer</li> <li>GraphicRenderer</li> <li>DebugRenderer</li> </ul>"},{"location":"technique/architecture/components/#gestionnaires","title":"Gestionnaires","text":""},{"location":"technique/architecture/components/#gamemanager","title":"GameManager","text":"<pre><code>class GameManager {\n    Grid grid;\n    IRenderer* renderer;\n    GameState state;\npublic:\n    void run();\n    void pause();\n    void update();\n};\n</code></pre>"},{"location":"technique/architecture/components/#patternmanager","title":"PatternManager","text":"<pre><code>class PatternManager {\n    map&lt;string, Pattern&gt; patterns;\npublic:\n    void loadPattern(string name);\n    void savePattern(string name, Pattern pattern);\n};\n</code></pre>"},{"location":"technique/architecture/components/#services","title":"Services","text":""},{"location":"technique/architecture/components/#fileservice","title":"FileService","text":"<ul> <li>Chargement/Sauvegarde de configurations</li> <li>Export de donn\u00e9es</li> <li>Gestion des logs</li> </ul>"},{"location":"technique/architecture/components/#configservice","title":"ConfigService","text":"<ul> <li>Param\u00e8tres du jeu</li> <li>Pr\u00e9f\u00e9rences utilisateur</li> <li>Configuration syst\u00e8me</li> </ul>"},{"location":"technique/architecture/overview/","title":"Vue d'ensemble de l'architecture","text":""},{"location":"technique/architecture/overview/#introduction","title":"Introduction","text":"<p>Le Jeu de la Vie est construit sur une architecture modulaire orient\u00e9e objet, permettant une s\u00e9paration claire des responsabilit\u00e9s et une maintenance facilit\u00e9e.</p>"},{"location":"technique/architecture/overview/#structure-generale","title":"Structure g\u00e9n\u00e9rale","text":""},{"location":"technique/architecture/overview/#couches-principales","title":"Couches principales","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Interface UI   \u2502 \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Contr\u00f4leurs    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Logique m\u00e9tier  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    Core         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"technique/architecture/overview/#composants-principaux","title":"Composants principaux","text":""},{"location":"technique/architecture/overview/#core","title":"Core","text":"<ul> <li>Gestion de la grille</li> <li>R\u00e8gles d'\u00e9volution</li> <li>\u00c9tat du jeu</li> </ul>"},{"location":"technique/architecture/overview/#logique-metier","title":"Logique m\u00e9tier","text":"<ul> <li>Calcul des g\u00e9n\u00e9rations</li> <li>Validation des r\u00e8gles</li> <li>Gestion des motifs</li> </ul>"},{"location":"technique/architecture/overview/#controleurs","title":"Contr\u00f4leurs","text":"<ul> <li>Gestion des entr\u00e9es</li> <li>Coordination des composants</li> <li>Gestion des \u00e9v\u00e9nements</li> </ul>"},{"location":"technique/architecture/overview/#interface-utilisateur","title":"Interface utilisateur","text":"<ul> <li>Rendu graphique/console</li> <li>Interaction utilisateur</li> <li>Affichage des statistiques</li> </ul>"},{"location":"technique/architecture/overview/#communication-entre-composants","title":"Communication entre composants","text":""},{"location":"technique/architecture/overview/#flux-de-donnees","title":"Flux de donn\u00e9es","text":"<pre><code>graph TD\n    A[Interface UI] --&gt; B[Contr\u00f4leurs]\n    B --&gt; C[Logique m\u00e9tier]\n    C --&gt; D[Core]\n    D --&gt; C\n    C --&gt; B\n    B --&gt; A</code></pre>"},{"location":"technique/architecture/overview/#principes-de-conception","title":"Principes de conception","text":""},{"location":"technique/architecture/overview/#solid","title":"SOLID","text":"<ul> <li>Single Responsibility</li> <li>Open/Closed</li> <li>Liskov Substitution</li> <li>Interface Segregation</li> <li>Dependency Inversion</li> </ul>"},{"location":"technique/architecture/overview/#autres-principes","title":"Autres principes","text":"<ul> <li>DRY (Don't Repeat Yourself)</li> <li>KISS (Keep It Simple, Stupid)</li> <li>Composition over Inheritance</li> </ul>"},{"location":"technique/architecture/patterns/","title":"Patterns de conception","text":""},{"location":"technique/architecture/patterns/#patterns-structurels","title":"Patterns structurels","text":""},{"location":"technique/architecture/patterns/#observer","title":"Observer","text":"<pre><code>// Subject\nclass Grid : public Subject {\n    void notifyObservers() override {\n        for(auto observer : observers) {\n            observer-&gt;update();\n        }\n    }\n};\n\n// Observer\nclass IRenderer : public Observer {\n    virtual void update() = 0;\n};\n</code></pre>"},{"location":"technique/architecture/patterns/#strategy","title":"Strategy","text":"<pre><code>// Interface\nclass IEvolutionStrategy {\npublic:\n    virtual bool evolve(Cell&amp; cell, int neighbors) = 0;\n};\n\n// Impl\u00e9mentations\nclass ClassicEvolution : public IEvolutionStrategy {\n    bool evolve(Cell&amp; cell, int neighbors) override;\n};\n</code></pre>"},{"location":"technique/architecture/patterns/#state","title":"State","text":"<pre><code>class GameState {\npublic:\n    virtual void update() = 0;\n    virtual void handle(Event e) = 0;\n};\n\nclass PlayState : public GameState {\n    void update() override;\n    void handle(Event e) override;\n};\n</code></pre>"},{"location":"technique/architecture/patterns/#patterns-creationnels","title":"Patterns cr\u00e9ationnels","text":""},{"location":"technique/architecture/patterns/#factory","title":"Factory","text":"<pre><code>class RendererFactory {\npublic:\n    static unique_ptr&lt;IRenderer&gt; createRenderer(RendererType type) {\n        switch(type) {\n            case RendererType::Console:\n                return make_unique&lt;ConsoleRenderer&gt;();\n            case RendererType::Graphic:\n                return make_unique&lt;GraphicRenderer&gt;();\n        }\n    }\n};\n</code></pre>"},{"location":"technique/architecture/patterns/#singleton","title":"Singleton","text":"<pre><code>class ConfigManager {\nprivate:\n    static ConfigManager* instance;\n    ConfigManager() {}\n\npublic:\n    static ConfigManager* getInstance() {\n        if(!instance) {\n            instance = new ConfigManager();\n        }\n        return instance;\n    }\n};\n</code></pre>"},{"location":"technique/architecture/patterns/#patterns-comportementaux","title":"Patterns comportementaux","text":""},{"location":"technique/architecture/patterns/#command","title":"Command","text":"<pre><code>class Command {\npublic:\n    virtual void execute() = 0;\n    virtual void undo() = 0;\n};\n\nclass ToggleCellCommand : public Command {\n    Grid&amp; grid;\n    int x, y;\npublic:\n    void execute() override;\n    void undo() override;\n};\n</code></pre>"},{"location":"technique/architecture/patterns/#iterator","title":"Iterator","text":"<pre><code>class GridIterator {\n    Grid&amp; grid;\n    int current;\npublic:\n    Cell&amp; next();\n    bool hasNext();\n    void reset();\n};\n</code></pre>"},{"location":"technique/diagrammes/classes/","title":"Diagrammes de Classes","text":""},{"location":"technique/diagrammes/classes/#structure-generale","title":"Structure g\u00e9n\u00e9rale","text":""},{"location":"technique/diagrammes/classes/#core-du-jeu","title":"Core du jeu","text":"<pre><code>classDiagram\n    Game *-- Grid\n    Game *-- IRenderer\n    Grid *-- Cell\n    IRenderer &lt;|-- ConsoleRenderer\n    IRenderer &lt;|-- GraphicRenderer\n\n    class Game {\n        -Grid grid\n        -IRenderer renderer\n        -GameState state\n        +run()\n        +pause()\n        +resume()\n    }\n\n    class Grid {\n        -vector&lt;Cell&gt; cells\n        -int width\n        -int height\n        +update()\n        +getCellState(x, y)\n        +setCellState(x, y, state)\n    }\n\n    class Cell {\n        -bool alive\n        -int x, y\n        +evolve(neighbors)\n        +isAlive()\n    }\n\n    class IRenderer {\n        &lt;&lt;interface&gt;&gt;\n        +render(Grid)\n        +clear()\n        +update()\n    }</code></pre>"},{"location":"technique/diagrammes/classes/#gestionnaires","title":"Gestionnaires","text":"<pre><code>classDiagram\n    GameManager --&gt; Grid\n    GameManager --&gt; PatternManager\n    GameManager --&gt; ConfigManager\n\n    class GameManager {\n        -Grid grid\n        -PatternManager patterns\n        -ConfigManager config\n        +run()\n        +loadPattern(name)\n        +saveState()\n    }\n\n    class PatternManager {\n        -map&lt;string, Pattern&gt; patterns\n        +loadPattern(name)\n        +savePattern(name, pattern)\n    }\n\n    class ConfigManager {\n        -Config config\n        +loadConfig()\n        +saveConfig()\n    }</code></pre>"},{"location":"technique/diagrammes/sequences/","title":"Diagrammes de S\u00e9quence","text":""},{"location":"technique/diagrammes/sequences/#cycle-de-vie-dune-generation","title":"Cycle de vie d'une g\u00e9n\u00e9ration","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Game\n    participant Grid\n    participant Cell\n    participant Renderer\n\n    User-&gt;&gt;Game: start()\n    loop Each Generation\n        Game-&gt;&gt;Grid: update()\n        loop Each Cell\n            Grid-&gt;&gt;Cell: evolve(neighbors)\n            Cell--&gt;&gt;Grid: newState\n        end\n        Grid-&gt;&gt;Renderer: notify()\n        Renderer-&gt;&gt;User: display()\n    end</code></pre>"},{"location":"technique/diagrammes/sequences/#interaction-utilisateur","title":"Interaction utilisateur","text":"<pre><code>sequenceDiagram\n    participant User\n    participant UI\n    participant Game\n    participant Grid\n    participant Renderer\n\n    User-&gt;&gt;UI: clickCell(x, y)\n    UI-&gt;&gt;Game: toggleCell(x, y)\n    Game-&gt;&gt;Grid: setCellState(x, y)\n    Grid-&gt;&gt;Renderer: notify()\n    Renderer-&gt;&gt;User: updateDisplay()</code></pre>"},{"location":"technique/diagrammes/sequences/#chargement-dun-motif","title":"Chargement d'un motif","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Game\n    participant PatternManager\n    participant Grid\n    participant Renderer\n\n    User-&gt;&gt;Game: loadPattern(name)\n    Game-&gt;&gt;PatternManager: getPattern(name)\n    PatternManager--&gt;&gt;Game: pattern\n    Game-&gt;&gt;Grid: applyPattern(pattern)\n    Grid-&gt;&gt;Renderer: notify()\n    Renderer-&gt;&gt;User: display()</code></pre>"},{"location":"technique/diagrammes/states/","title":"Diagrammes d'\u00c9tats","text":""},{"location":"technique/diagrammes/states/#etats-du-jeu","title":"\u00c9tats du jeu","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Initialize\n    Initialize --&gt; Running: start\n    Running --&gt; Paused: pause\n    Paused --&gt; Running: resume\n    Running --&gt; [*]: quit\n    Paused --&gt; [*]: quit\n\n    state Running {\n        [*] --&gt; UpdateGrid\n        UpdateGrid --&gt; RenderFrame\n        RenderFrame --&gt; HandleEvents\n        HandleEvents --&gt; UpdateGrid\n    }\n\n    state Paused {\n        [*] --&gt; WaitForInput\n        WaitForInput --&gt; HandlePausedEvents\n        HandlePausedEvents --&gt; WaitForInput\n    }</code></pre>"},{"location":"technique/diagrammes/states/#etats-des-cellules","title":"\u00c9tats des cellules","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Dead\n    Dead --&gt; Alive: birth\n    Alive --&gt; Dead: death\n\n    state Alive {\n        [*] --&gt; CheckNeighbors\n        CheckNeighbors --&gt; Survive: 2-3 neighbors\n        CheckNeighbors --&gt; Die: &lt;2 or &gt;3 neighbors\n    }\n\n    state Dead {\n        [*] --&gt; CheckNeighbors\n        CheckNeighbors --&gt; Birth: exactly 3 neighbors\n        CheckNeighbors --&gt; StayDead: otherwise\n    }</code></pre>"},{"location":"technique/diagrammes/states/#flux-de-donnees","title":"Flux de donn\u00e9es","text":"<pre><code>flowchart TD\n    A[Input] --&gt; B{\u00c9tat du jeu}\n    B --&gt;|Running| C[Update Grid]\n    B --&gt;|Paused| D[Handle Events]\n    C --&gt; E[Render]\n    D --&gt; E\n    E --&gt; B</code></pre>"},{"location":"technique/diagrammes/states/#notes-dimplementation","title":"Notes d'impl\u00e9mentation","text":""},{"location":"technique/diagrammes/states/#transitions-detats","title":"Transitions d'\u00e9tats","text":"<ul> <li>Les transitions sont g\u00e9r\u00e9es par le GameManager</li> <li>Chaque \u00e9tat impl\u00e9mente ses propres handlers</li> <li>Les \u00e9v\u00e9nements sont distribu\u00e9s selon l'\u00e9tat actuel</li> </ul>"},{"location":"technique/diagrammes/states/#gestion-des-evenements","title":"Gestion des \u00e9v\u00e9nements","text":"<ul> <li>Events queue pour les entr\u00e9es utilisateur</li> <li>Priorit\u00e9 des \u00e9v\u00e9nements syst\u00e8me</li> <li>Callbacks pour les changements d'\u00e9tat</li> </ul>"},{"location":"technique/diagrammes/states/#persistance","title":"Persistance","text":"<ul> <li>Sauvegarde automatique de l'\u00e9tat</li> <li>Restauration de la derni\u00e8re session</li> <li>Points de sauvegarde manuels</li> </ul>"},{"location":"tests/benchmarks/","title":"Benchmarks","text":""},{"location":"tests/benchmarks/#configuration","title":"Configuration","text":""},{"location":"tests/benchmarks/#environnement-de-test","title":"Environnement de test","text":"<pre><code>struct BenchmarkConfig {\n    size_t gridSize;\n    size_t iterations;\n    bool useParallel;\n    string patternFile;\n};\n\nclass BenchmarkEnvironment {\npublic:\n    static void setUp(const BenchmarkConfig&amp; config);\n    static void tearDown();\n    static void runBenchmark(const string&amp; name);\n};\n</code></pre>"},{"location":"tests/benchmarks/#tests-de-performance","title":"Tests de performance","text":""},{"location":"tests/benchmarks/#performance-de-la-grille","title":"Performance de la grille","text":"<pre><code>BENCHMARK_CASE(\"Grid performance\", \"[benchmark][grid]\") {\n    BENCHMARK(\"Grid update 100x100\") {\n        Grid grid(100, 100);\n        setupRandomPattern(grid, 0.3); // 30% de cellules vivantes\n        return grid.update();\n    }\n\n    BENCHMARK(\"Grid update 1000x1000\") {\n        Grid grid(1000, 1000);\n        setupRandomPattern(grid, 0.3);\n        return grid.update();\n    }\n}\n</code></pre>"},{"location":"tests/benchmarks/#performance-du-rendu","title":"Performance du rendu","text":"<pre><code>BENCHMARK_CASE(\"Renderer performance\", \"[benchmark][renderer]\") {\n    BENCHMARK(\"Console renderer\") {\n        ConsoleRenderer renderer(80, 24);\n        return renderer.render(testGrid);\n    }\n\n    BENCHMARK(\"SFML renderer\") {\n        GraphicRenderer renderer(window);\n        return renderer.render(testGrid);\n    }\n}\n</code></pre>"},{"location":"tests/benchmarks/#resultats","title":"R\u00e9sultats","text":""},{"location":"tests/benchmarks/#format-des-resultats","title":"Format des r\u00e9sultats","text":"<pre><code>{\n    \"benchmark\": \"Grid update 100x100\",\n    \"iterations\": 1000,\n    \"results\": {\n        \"mean\": 0.452,\n        \"stddev\": 0.023,\n        \"min\": 0.412,\n        \"max\": 0.534\n    },\n    \"memory\": {\n        \"peak\": \"24.5MB\",\n        \"final\": \"12.3MB\"\n    }\n}\n</code></pre>"},{"location":"tests/benchmarks/#generation-de-graphiques","title":"G\u00e9n\u00e9ration de graphiques","text":"<pre><code>import matplotlib.pyplot as plt\n\ndef plot_benchmark_results(results_file):\n    # Code pour g\u00e9n\u00e9rer les graphiques\n    pass\n</code></pre>"},{"location":"tests/benchmarks/#analyse","title":"Analyse","text":""},{"location":"tests/benchmarks/#metriques-cles","title":"M\u00e9triques cl\u00e9s","text":"<ul> <li>Temps d'ex\u00e9cution moyen</li> <li>Utilisation m\u00e9moire</li> <li>Temps de r\u00e9ponse UI</li> <li>Charge CPU</li> </ul>"},{"location":"tests/benchmarks/#seuils-de-performance","title":"Seuils de performance","text":"<pre><code>namespace PerformanceThresholds {\n    constexpr double MAX_UPDATE_TIME_MS = 16.67; // 60 FPS\n    constexpr size_t MAX_MEMORY_USAGE_MB = 100;\n    constexpr double MAX_LATENCY_MS = 50;\n}\n</code></pre>"},{"location":"tests/benchmarks/#optimisation","title":"Optimisation","text":""},{"location":"tests/benchmarks/#profilage","title":"Profilage","text":"<pre><code>class Profiler {\npublic:\n    static void startSection(const string&amp; name);\n    static void endSection();\n    static void generateReport();\n\nprivate:\n    static map&lt;string, vector&lt;double&gt;&gt; timings;\n};\n</code></pre>"},{"location":"tests/benchmarks/#points-doptimisation","title":"Points d'optimisation","text":"<ol> <li>Calcul des voisins</li> <li>Mise \u00e0 jour de la grille</li> <li>Rendu graphique</li> <li>Gestion de la m\u00e9moire</li> </ol>"},{"location":"tests/benchmarks/#rapports","title":"Rapports","text":""},{"location":"tests/benchmarks/#generation","title":"G\u00e9n\u00e9ration","text":"<pre><code># Ex\u00e9cution des benchmarks\n./run_benchmarks.sh\n\n# G\u00e9n\u00e9ration des rapports\npython generate_reports.py\n</code></pre>"},{"location":"tests/benchmarks/#format-html","title":"Format HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Benchmark Results&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"results\"&gt;&lt;/div&gt;\n    &lt;div id=\"charts\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tests/integration/","title":"Tests d'Int\u00e9gration","text":""},{"location":"tests/integration/#configuration","title":"Configuration","text":""},{"location":"tests/integration/#environnement","title":"Environnement","text":"<pre><code># Variables d'environnement requises\nexport GOL_TEST_DATA=/path/to/test/data\nexport GOL_TEMP_DIR=/path/to/temp\nexport GOL_LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"tests/integration/#structure-des-tests","title":"Structure des tests","text":"<pre><code>tests/\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 scenarios/\n\u2502   \u2502   \u251c\u2500\u2500 basic_patterns.json\n\u2502   \u2502   \u251c\u2500\u2500 complex_evolution.json\n\u2502   \u2502   \u2514\u2500\u2500 edge_cases.json\n\u2502   \u251c\u2500\u2500 test_game_flow.cpp\n\u2502   \u251c\u2500\u2500 test_file_io.cpp\n\u2502   \u2514\u2500\u2500 test_rendering.cpp\n\u2514\u2500\u2500 data/\n    \u251c\u2500\u2500 patterns/\n    \u251c\u2500\u2500 configs/\n    \u2514\u2500\u2500 expected_results/\n</code></pre>"},{"location":"tests/integration/#scenarios-de-test","title":"Sc\u00e9narios de test","text":""},{"location":"tests/integration/#test-du-flux-de-jeu","title":"Test du flux de jeu","text":"<pre><code>TEST_CASE(\"Game flow integration\", \"[integration]\") {\n    GameManager game;\n    TestObserver observer;\n\n    SECTION(\"Complete game cycle\") {\n        game.addObserver(&amp;observer);\n        game.loadPattern(\"glider\");\n\n        // Simulate 100 generations\n        for(int i = 0; i &lt; 100; i++) {\n            game.update();\n            REQUIRE(observer.isConsistent());\n        }\n\n        auto finalState = game.getGrid().serialize();\n        REQUIRE(finalState == loadExpectedState(\"glider_100gen\"));\n    }\n}\n</code></pre>"},{"location":"tests/integration/#test-des-entreessorties","title":"Test des entr\u00e9es/sorties","text":"<pre><code>TEST_CASE(\"File I/O integration\", \"[integration]\") {\n    SECTION(\"Pattern loading and saving\") {\n        // Load pattern\n        Pattern pattern = PatternLoader::load(\"patterns/glider.gol\");\n        REQUIRE(pattern.isValid());\n\n        // Save pattern\n        string tempFile = getTempPath() + \"/test_pattern.gol\";\n        REQUIRE(PatternLoader::save(pattern, tempFile));\n\n        // Compare files\n        REQUIRE(compareFiles(\"patterns/glider.gol\", tempFile));\n    }\n}\n</code></pre>"},{"location":"tests/integration/#outils-et-utilitaires","title":"Outils et utilitaires","text":""},{"location":"tests/integration/#testobserver","title":"TestObserver","text":"<pre><code>class TestObserver : public IObserver {\npublic:\n    void update(const Grid&amp; grid) override {\n        generations.push_back(grid.serialize());\n    }\n\n    bool isConsistent() const {\n        // V\u00e9rification de la coh\u00e9rence\n        return true;\n    }\n\nprivate:\n    vector&lt;string&gt; generations;\n};\n</code></pre>"},{"location":"tests/integration/#helpers","title":"Helpers","text":"<pre><code>namespace TestUtils {\n    // Comparaison de fichiers\n    bool compareFiles(const string&amp; file1, const string&amp; file2);\n\n    // G\u00e9n\u00e9ration de chemins temporaires\n    string getTempPath();\n\n    // Chargement de donn\u00e9es de test\n    string loadTestData(const string&amp; name);\n}\n</code></pre>"},{"location":"tests/integration/#execution","title":"Ex\u00e9cution","text":""},{"location":"tests/integration/#lancement-des-tests","title":"Lancement des tests","text":"<pre><code># Tous les tests d'int\u00e9gration\n./tests/integration_tests\n\n# Tests sp\u00e9cifiques\n./tests/integration_tests \"[game_flow]\"\n</code></pre>"},{"location":"tests/integration/#options-dexecution","title":"Options d'ex\u00e9cution","text":"<pre><code># Mode verbeux\n./tests/integration_tests -V\n\n# G\u00e9n\u00e9ration de rapport\n./tests/integration_tests --reporter junit &gt; report.xml\n</code></pre>"},{"location":"tests/integration/#validation-et-verification","title":"Validation et v\u00e9rification","text":""},{"location":"tests/integration/#points-de-verification","title":"Points de v\u00e9rification","text":"<ol> <li>Coh\u00e9rence des \u00e9tats</li> <li>Performance</li> <li>Gestion des ressources</li> <li>Comportement des interfaces</li> </ol>"},{"location":"tests/integration/#metriques","title":"M\u00e9triques","text":"<ul> <li>Temps d'ex\u00e9cution</li> <li>Utilisation m\u00e9moire</li> <li>Taux de r\u00e9ussite</li> <li>Couverture des sc\u00e9narios</li> </ul>"},{"location":"tests/unitaires/","title":"Tests Unitaires","text":""},{"location":"tests/unitaires/#configuration","title":"Configuration","text":""},{"location":"tests/unitaires/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Framework de test : Catch2</li> <li>CMake avec option <code>BUILD_TESTS=ON</code></li> <li>Couverture de code : gcov/lcov</li> </ul>"},{"location":"tests/unitaires/#structure-des-tests","title":"Structure des tests","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 test_grid.cpp\n\u2502   \u2502   \u251c\u2500\u2500 test_cell.cpp\n\u2502   \u2502   \u2514\u2500\u2500 test_game.cpp\n\u2502   \u251c\u2500\u2500 renderer/\n\u2502   \u2502   \u251c\u2500\u2500 test_console_renderer.cpp\n\u2502   \u2502   \u2514\u2500\u2500 test_graphic_renderer.cpp\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 test_config.cpp\n\u2502       \u2514\u2500\u2500 test_pattern.cpp\n\u2514\u2500\u2500 CMakeLists.txt\n</code></pre>"},{"location":"tests/unitaires/#exemples-de-tests","title":"Exemples de tests","text":""},{"location":"tests/unitaires/#test-de-la-classe-grid","title":"Test de la classe Grid","text":"<pre><code>TEST_CASE(\"Grid initialization and basic operations\", \"[grid]\") {\n    SECTION(\"Grid creation\") {\n        Grid grid(10, 10);\n        REQUIRE(grid.getWidth() == 10);\n        REQUIRE(grid.getHeight() == 10);\n        REQUIRE(grid.getPopulation() == 0);\n    }\n\n    SECTION(\"Cell state manipulation\") {\n        Grid grid(10, 10);\n        grid.setCellState(5, 5, true);\n        REQUIRE(grid.getCellState(5, 5) == true);\n        REQUIRE(grid.getPopulation() == 1);\n    }\n\n    SECTION(\"Grid evolution\") {\n        Grid grid(10, 10);\n        // Setup glider pattern\n        grid.setCellState(1, 0, true);\n        grid.setCellState(2, 1, true);\n        grid.setCellState(0, 2, true);\n        grid.setCellState(1, 2, true);\n        grid.setCellState(2, 2, true);\n\n        grid.update();\n        REQUIRE(grid.getPopulation() == 5);\n    }\n}\n</code></pre>"},{"location":"tests/unitaires/#test-des-regles-devolution","title":"Test des r\u00e8gles d'\u00e9volution","text":"<pre><code>TEST_CASE(\"Cell evolution rules\", \"[cell]\") {\n    SECTION(\"Underpopulation\") {\n        Cell cell(0, 0, true);\n        REQUIRE(cell.evolve(1) == false);\n    }\n\n    SECTION(\"Survival\") {\n        Cell cell(0, 0, true);\n        REQUIRE(cell.evolve(2) == true);\n        REQUIRE(cell.evolve(3) == true);\n    }\n\n    SECTION(\"Overpopulation\") {\n        Cell cell(0, 0, true);\n        REQUIRE(cell.evolve(4) == false);\n    }\n\n    SECTION(\"Reproduction\") {\n        Cell cell(0, 0, false);\n        REQUIRE(cell.evolve(3) == true);\n    }\n}\n</code></pre>"},{"location":"tests/unitaires/#execution-des-tests","title":"Ex\u00e9cution des tests","text":""},{"location":"tests/unitaires/#compilation-et-lancement","title":"Compilation et lancement","text":"<pre><code># Configuration\nmkdir build &amp;&amp; cd build\ncmake -DBUILD_TESTS=ON ..\n\n# Compilation\nmake\n\n# Ex\u00e9cution\nctest --output-on-failure\n# ou\n./tests/unit_tests\n</code></pre>"},{"location":"tests/unitaires/#options-de-test","title":"Options de test","text":"<pre><code># Ex\u00e9cution d'une section sp\u00e9cifique\n./tests/unit_tests \"[grid]\"\n\n# Ex\u00e9cution avec d\u00e9tails\n./tests/unit_tests -s\n\n# Filtrage des tests\n./tests/unit_tests \"[grid][cell]\"\n</code></pre>"},{"location":"tests/unitaires/#couverture-de-code","title":"Couverture de code","text":""},{"location":"tests/unitaires/#generation-des-rapports","title":"G\u00e9n\u00e9ration des rapports","text":"<pre><code># Configuration avec couverture\ncmake -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON ..\n\n# Compilation et ex\u00e9cution\nmake\nmake test\n\n# G\u00e9n\u00e9ration du rapport\nmake coverage\n</code></pre>"},{"location":"tests/unitaires/#analyse-des-resultats","title":"Analyse des r\u00e9sultats","text":"<pre><code># Ouverture du rapport HTML\nfirefox coverage/index.html\n# ou\nopen coverage/index.html\n</code></pre>"},{"location":"tests/unitaires/#bonnes-pratiques","title":"Bonnes pratiques","text":""},{"location":"tests/unitaires/#organisation-des-tests","title":"Organisation des tests","text":"<ol> <li>Un fichier de test par classe</li> <li>Sections logiques dans chaque test</li> <li>Tests des cas limites</li> <li>Tests des cas d'erreur</li> </ol>"},{"location":"tests/unitaires/#nommage-des-tests","title":"Nommage des tests","text":"<ul> <li>Noms descriptifs et clairs</li> <li>Indication du comportement test\u00e9</li> <li>Regroupement par fonctionnalit\u00e9</li> </ul>"},{"location":"tests/unitaires/#maintenance","title":"Maintenance","text":"<ul> <li>Mise \u00e0 jour r\u00e9guli\u00e8re des tests</li> <li>V\u00e9rification de la couverture</li> <li>Documentation des cas de test</li> </ul>"}]}