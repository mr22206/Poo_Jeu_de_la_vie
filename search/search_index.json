{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Le Jeu de la Vie","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Le Jeu de la Vie est un automate cellulaire cr\u00e9\u00e9 par John Conway en 1970. Cette impl\u00e9mentation en C++ propose une simulation interactive et moderne de cet univers fascinant, offrant \u00e0 la fois une interface graphique et un mode console.</p>"},{"location":"#regles-du-jeu","title":"R\u00e8gles du jeu","text":""},{"location":"#principes-fondamentaux","title":"Principes fondamentaux","text":"<ol> <li>Une cellule morte avec exactement 3 voisines vivantes na\u00eet</li> <li>Une cellule vivante avec 2 ou 3 voisines vivantes survit</li> <li>Dans tous les autres cas, les cellules meurent ou restent mortes</li> </ol>"},{"location":"#exemple-devolution","title":"Exemple d'\u00e9volution","text":"<pre><code>G\u00e9n\u00e9ration N     G\u00e9n\u00e9ration N+1\n \u25a1 \u25a0 \u25a1           \u25a1 \u25a1 \u25a1\n \u25a1 \u25a0 \u25a1    \u2192      \u25a0 \u25a0 \u25a0\n \u25a1 \u25a0 \u25a1           \u25a1 \u25a1 \u25a1\n</code></pre>"},{"location":"#fonctionnalites","title":"Fonctionnalit\u00e9s","text":""},{"location":"#interface-utilisateur","title":"Interface utilisateur","text":"<ul> <li>\ud83c\udfae Mode graphique SFML</li> <li>Rendu fluide 60 FPS</li> <li>Zoom et d\u00e9placement</li> <li>Interface intuitive</li> <li> <p>Statistiques en temps r\u00e9el</p> </li> <li> <p>\ud83d\udcbb Mode console ASCII</p> </li> <li>L\u00e9ger et rapide</li> <li>Id\u00e9al pour SSH</li> <li>Compatible tous terminaux</li> <li>Navigation clavier</li> </ul>"},{"location":"#gestion-de-la-simulation","title":"Gestion de la simulation","text":"<ul> <li>\u26a1 Contr\u00f4le de vitesse (1x \u00e0 10x)</li> <li>\ud83d\udcbe Sauvegarde/Chargement d'\u00e9tats</li> <li>\ud83d\udd04 Mode torique (grille infinie)</li> <li>\ud83d\udcca Statistiques en temps r\u00e9el</li> </ul>"},{"location":"#motifs-predefinis","title":"Motifs pr\u00e9d\u00e9finis","text":"Nom Description P\u00e9riode Planeur Se d\u00e9place en diagonale 4 Clignotant Oscille verticalement 2 Canon G\u00e9n\u00e8re des planeurs 30"},{"location":"#stack-technique","title":"Stack Technique","text":""},{"location":"#technologies-principales","title":"Technologies principales","text":"Technologie Version Usage C++ 17+ Langage principal SFML 2.5+ Interface graphique CMake 3.10+ Build system GoogleTest 1.11+ Tests unitaires"},{"location":"#dependances-optionnelles","title":"D\u00e9pendances optionnelles","text":"<ul> <li>fmt (logging)</li> <li>spdlog (logging avanc\u00e9)</li> <li>nlohmann/json (fichiers config)</li> <li>CLI11 (parsing arguments)</li> </ul>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"#guide-utilisateur","title":"Guide utilisateur","text":"<ol> <li>Installation rapide</li> <li>Pr\u00e9requis</li> <li>Compilation</li> <li> <p>Premier lancement</p> </li> <li> <p>Guide d'utilisation</p> </li> <li>Interface graphique</li> <li>Mode console</li> <li>Contr\u00f4les</li> <li> <p>Configuration</p> </li> <li> <p>Motifs et configurations</p> </li> <li>Catalogue de motifs</li> <li>Cr\u00e9ation de motifs</li> <li>Import/Export</li> </ol>"},{"location":"#documentation-technique","title":"Documentation technique","text":"<ol> <li>Architecture</li> <li>Structure MVC</li> <li>Composants principaux</li> <li> <p>Points d'extension</p> </li> <li> <p>D\u00e9veloppement</p> </li> <li>Workflow</li> <li>Standards de code</li> <li> <p>Pull requests</p> </li> <li> <p>Tests</p> </li> <li>Tests unitaires</li> <li>Int\u00e9gration continue</li> <li>Benchmarks</li> </ol>"},{"location":"#contribution","title":"Contribution","text":""},{"location":"#comment-contribuer","title":"Comment contribuer","text":"<ol> <li>Fork du projet</li> <li>Cr\u00e9ation de branche</li> <li>D\u00e9veloppement avec tests</li> <li>Pull request</li> </ol>"},{"location":"#standards","title":"Standards","text":"<ul> <li>Code style : Google C++</li> <li>Commits : Conventionnal Commits</li> <li>Documentation : Doxygen</li> <li>Tests : GoogleTest</li> </ul>"},{"location":"#licence","title":"Licence","text":"<p>Ce projet est sous licence MIT. Voir LICENSE pour plus de d\u00e9tails.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>\ud83d\udce7 Email : contact@example.com</li> <li>\ud83c\udf10 Site : https://example.com</li> <li>\ud83d\udcac Discord : Rejoindre</li> </ul>"},{"location":"quickstart/","title":"D\u00e9marrage Rapide","text":""},{"location":"quickstart/#vue-densemble","title":"Vue d'ensemble","text":"<p>Ce guide vous permettra d'installer et lancer rapidement le Jeu de la Vie. Pour une installation plus d\u00e9taill\u00e9e, consultez le guide d'installation complet.</p>"},{"location":"quickstart/#prerequis","title":"Pr\u00e9requis","text":""},{"location":"quickstart/#environnement-de-developpement","title":"Environnement de d\u00e9veloppement","text":"Composant Version minimale Version recommand\u00e9e Compilateur C++ GCC 8+ / MSVC 2019+ GCC 11+ / MSVC 2022+ CMake 3.10+ 3.20+ SFML 2.5+ 2.6+ Git 2.0+ 2.34+"},{"location":"quickstart/#espace-disque","title":"Espace disque","text":"<ul> <li>Sources : ~10 MB</li> <li>Build : ~100 MB</li> <li>Installation : ~50 MB</li> </ul>"},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code># Mise \u00e0 jour du syst\u00e8me\nsudo apt update\n\n# Installation des d\u00e9pendances\nsudo apt install -y \\\n    build-essential \\\n    cmake \\\n    libsfml-dev \\\n    git\n\n# Clonage et compilation\ngit clone https://github.com/votre-repo/jeu-de-vie\ncd jeu-de-vie\nmkdir build &amp;&amp; cd build\ncmake ..\nmake -j$(nproc)\n</code></pre>"},{"location":"quickstart/#windows","title":"Windows","text":"<ol> <li>Installer les outils</li> <li>Visual Studio avec C++</li> <li>CMake</li> <li>SFML 2.5+</li> <li> <p>Git</p> </li> <li> <p>Compiler <pre><code># Cloner le projet\ngit clone https://github.com/votre-repo/jeu-de-vie\ncd jeu-de-vie\n\n# Cr\u00e9er et configurer le build\nmkdir build\ncd build\ncmake ..\n\n# Ouvrir et compiler avec Visual Studio\nstart JeuDeLaVie.sln\n</code></pre></p> </li> </ol>"},{"location":"quickstart/#macos","title":"macOS","text":"<pre><code># Installer les d\u00e9pendances avec Homebrew\nbrew update\nbrew install cmake sfml git\n\n# Cloner et compiler\ngit clone https://github.com/votre-repo/jeu-de-vie\ncd jeu-de-vie\nmkdir build &amp;&amp; cd build\ncmake ..\nmake -j$(sysctl -n hw.ncpu)\n</code></pre>"},{"location":"quickstart/#lancement-rapide","title":"Lancement rapide","text":""},{"location":"quickstart/#mode-graphique-defaut","title":"Mode graphique (d\u00e9faut)","text":"<pre><code># Lancer avec param\u00e8tres par d\u00e9faut\n./jeu-de-vie\n\n# Sp\u00e9cifier la taille de la grille\n./jeu-de-vie --width 100 --height 100\n</code></pre>"},{"location":"quickstart/#mode-console","title":"Mode console","text":"<pre><code># Mode console simple\n./jeu-de-vie -c\n\n# Mode console avec options\n./jeu-de-vie -c --speed 2 --toroidal\n</code></pre>"},{"location":"quickstart/#commandes-essentielles","title":"Commandes essentielles","text":""},{"location":"quickstart/#controles-generaux","title":"Contr\u00f4les g\u00e9n\u00e9raux","text":"Touche Action Description Espace Play/Pause D\u00e9marre/Arr\u00eate la simulation R Reset R\u00e9initialise la grille Q Quitter Ferme l'application +/- Vitesse Ajuste la vitesse de simulation"},{"location":"quickstart/#interactions-souris-mode-graphique","title":"Interactions souris (Mode graphique)","text":"Action Effet Clic gauche Active/D\u00e9sactive une cellule Clic droit Place un motif pr\u00e9d\u00e9fini Molette Zoom in/out Glisser D\u00e9place la vue"},{"location":"quickstart/#verification-de-linstallation","title":"V\u00e9rification de l'installation","text":""},{"location":"quickstart/#tests-rapides","title":"Tests rapides","text":"<ol> <li>Lancer le programme</li> <li>V\u00e9rifier l'affichage</li> <li>Tester les contr\u00f4les de base</li> <li>Cr\u00e9er un motif simple</li> </ol>"},{"location":"quickstart/#problemes-courants","title":"Probl\u00e8mes courants","text":"Probl\u00e8me Solution SFML non trouv\u00e9e V\u00e9rifier l'installation SFML Erreur CMake Mettre \u00e0 jour CMake DLL manquante Copier les DLLs SFML"},{"location":"quickstart/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<ul> <li>Guide utilisateur complet</li> <li>Documentation des motifs</li> <li>Guide d'installation d\u00e9taill\u00e9</li> </ul>"},{"location":"guide_utilisateur/installation/","title":"Guide de D\u00e9veloppement","text":""},{"location":"guide_utilisateur/installation/#vue-densemble","title":"Vue d'ensemble","text":""},{"location":"guide_utilisateur/installation/#philosophie","title":"Philosophie","text":"<p>Notre workflow est con\u00e7u pour \u00eatre : - Simple \u00e0 comprendre - Facile \u00e0 suivre - Efficace en \u00e9quipe - Maintenable dans le temps</p>"},{"location":"guide_utilisateur/installation/#outils-necessaires","title":"Outils n\u00e9cessaires","text":"<ul> <li>Git</li> <li>VS Code (recommand\u00e9)</li> <li>CMake</li> <li>Compilateur C++</li> </ul>"},{"location":"guide_utilisateur/installation/#cycle-de-developpement","title":"Cycle de d\u00e9veloppement","text":""},{"location":"guide_utilisateur/installation/#1-preparation","title":"1. Pr\u00e9paration","text":"<ol> <li>Choisir une issue ou en cr\u00e9er une</li> <li>Discuter de l'approche en commentaires</li> <li>Assigner l'issue \u00e0 soi-m\u00eame</li> </ol>"},{"location":"guide_utilisateur/installation/#2-developpement","title":"2. D\u00e9veloppement","text":"<pre><code># Cr\u00e9er une branche\ngit checkout -b feature/ma-fonctionnalite\n\n# D\u00e9velopper avec tests\n# Commit r\u00e9guli\u00e8rement\ngit commit -m \"feat(scope): description\"\n</code></pre>"},{"location":"guide_utilisateur/installation/#3-validation","title":"3. Validation","text":"<ul> <li>Tests unitaires passent</li> <li>Style de code respect\u00e9</li> <li>Documentation \u00e0 jour</li> </ul>"},{"location":"guide_utilisateur/installation/#4-pull-request","title":"4. Pull Request","text":"<ul> <li>Description claire</li> <li>R\u00e9f\u00e9rences l'issue</li> <li>Screenshots si UI</li> <li>Tests mentionn\u00e9s</li> </ul>"},{"location":"guide_utilisateur/installation/#standards-de-code","title":"Standards de Code","text":""},{"location":"guide_utilisateur/installation/#commits","title":"Commits","text":"<p>\u2705 BIEN : <pre><code>feat(grid): add toroidal mode\nfix(ui): correct cell color update\ndocs(readme): update installation guide\n</code></pre></p> <p>\u274c \u00c0 \u00c9VITER : <pre><code>update code\nfix bug\nwip\n</code></pre></p>"},{"location":"guide_utilisateur/installation/#branches","title":"Branches","text":"<ul> <li><code>main</code> : production</li> <li><code>develop</code> : d\u00e9veloppement</li> <li><code>feature/*</code> : nouvelles fonctionnalit\u00e9s</li> <li><code>fix/*</code> : corrections de bugs</li> </ul>"},{"location":"guide_utilisateur/installation/#revue-de-code","title":"Revue de Code","text":""},{"location":"guide_utilisateur/installation/#checklist-du-reviewer","title":"Checklist du reviewer","text":"<ul> <li>[ ] Code lisible et comment\u00e9</li> <li>[ ] Tests pr\u00e9sents et passent</li> <li>[ ] Pas de r\u00e9gressions</li> <li>[ ] Documentation \u00e0 jour</li> <li>[ ] Style respect\u00e9</li> </ul>"},{"location":"guide_utilisateur/installation/#feedback-constructif","title":"Feedback constructif","text":"<p>\u2705 BIEN : <pre><code>Suggestion : utiliser std::vector ici pour la gestion m\u00e9moire\n</code></pre></p> <p>\u274c \u00c0 \u00c9VITER : <pre><code>Ce code est mauvais\n</code></pre></p>"},{"location":"guide_utilisateur/installation/#integration-continue","title":"Int\u00e9gration Continue","text":""},{"location":"guide_utilisateur/installation/#actions-automatiques","title":"Actions automatiques","text":"<pre><code>name: CI\non: [push, pull_request]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build &amp; Test\n        run: |\n          mkdir build\n          cd build\n          cmake ..\n          make\n          ./tests/unit_tests\n</code></pre>"},{"location":"guide_utilisateur/installation/#verifications","title":"V\u00e9rifications","text":"<ul> <li>Build \u2705</li> <li>Tests \u2705</li> <li>Style \u2705</li> <li>Documentation \u2705</li> </ul>"},{"location":"guide_utilisateur/installation/#versions-et-releases","title":"Versions et Releases","text":""},{"location":"guide_utilisateur/installation/#versioning","title":"Versioning","text":"<ul> <li>MAJOR : changements incompatibles</li> <li>MINOR : nouvelles fonctionnalit\u00e9s</li> <li>PATCH : corrections de bugs</li> </ul>"},{"location":"guide_utilisateur/installation/#publication","title":"Publication","text":"<ol> <li>Mettre \u00e0 jour CHANGELOG.md</li> <li>Cr\u00e9er un tag Git</li> <li>Build sur toutes plateformes</li> <li>Publication sur GitHub</li> </ol>"},{"location":"guide_utilisateur/utilisation/interface/","title":"Interface Utilisateur","text":""},{"location":"guide_utilisateur/utilisation/interface/#introduction","title":"Introduction","text":"<p>Le Jeu de la Vie propose deux interfaces distinctes : un mode graphique moderne avec SFML et un mode console traditionnel. Chaque mode offre ses avantages sp\u00e9cifiques selon vos besoins.</p>"},{"location":"guide_utilisateur/utilisation/interface/#modes-daffichage","title":"Modes d'affichage","text":""},{"location":"guide_utilisateur/utilisation/interface/#mode-graphique-sfml","title":"Mode Graphique (SFML)","text":"<ul> <li>Grille interactive en 2D</li> <li>Cellules color\u00e9es :</li> <li>Vivantes : blanc</li> <li>Mortes : noir</li> <li>S\u00e9lectionn\u00e9es : bleu</li> <li>Interface de contr\u00f4le intuitive</li> <li>Affichage des statistiques en temps r\u00e9el</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#mode-console-ascii","title":"Mode Console (ASCII)","text":"<ul> <li>Repr\u00e9sentation en caract\u00e8res ASCII</li> <li>Symboles :</li> <li>Cellule vivante : '*'</li> <li>Cellule morte : ' '</li> <li>Bordure : '+' et '-'</li> <li>Interface minimaliste mais fonctionnelle</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#controles","title":"Contr\u00f4les","text":""},{"location":"guide_utilisateur/utilisation/interface/#commandes-generales","title":"Commandes g\u00e9n\u00e9rales","text":"Touche Action Description Espace Play/Pause D\u00e9marre/Arr\u00eate la simulation R Reset R\u00e9initialise la grille Q Quitter Ferme l'application S Sauvegarder Enregistre l'\u00e9tat actuel L Charger Charge une configuration"},{"location":"guide_utilisateur/utilisation/interface/#controles-de-simulation","title":"Contr\u00f4les de simulation","text":"Touche Action Description + Augmenter vitesse Acc\u00e9l\u00e8re la simulation - Diminuer vitesse Ralentit la simulation T Mode torique Active/D\u00e9sactive les bords infinis"},{"location":"guide_utilisateur/utilisation/interface/#interactions-souris-mode-graphique","title":"Interactions souris (Mode graphique)","text":"Action Effet Description Clic gauche Activer/D\u00e9sactiver Modifie l'\u00e9tat d'une cellule Clic droit Placer motif Ins\u00e8re un motif pr\u00e9d\u00e9fini Molette Zoom Ajuste l'\u00e9chelle de la grille Drag D\u00e9placer D\u00e9place la vue (avec zoom)"},{"location":"guide_utilisateur/utilisation/interface/#fonctionnalites","title":"Fonctionnalit\u00e9s","text":""},{"location":"guide_utilisateur/utilisation/interface/#sauvegardechargement","title":"Sauvegarde/Chargement","text":"<ul> <li>Format : fichier texte simple</li> <li>Contenu :</li> <li>Dimensions de la grille</li> <li>\u00c9tats des cellules</li> <li>Configuration actuelle</li> <li>Compatibilit\u00e9 entre modes</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#options-de-simulation","title":"Options de simulation","text":"<ul> <li>Vitesse : 1-10x</li> <li>Mode torique : grille infinie</li> <li>Statistiques temps r\u00e9el :</li> <li>Population vivante</li> <li>Num\u00e9ro de g\u00e9n\u00e9ration</li> <li>Images par seconde</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#depannage","title":"D\u00e9pannage","text":""},{"location":"guide_utilisateur/utilisation/interface/#problemes-courants","title":"Probl\u00e8mes courants","text":"<ul> <li>Fen\u00eatre ne s'ouvre pas : V\u00e9rifier installation SFML</li> <li>Contr\u00f4les ne r\u00e9pondent pas : V\u00e9rifier focus fen\u00eatre</li> <li>Performances faibles : R\u00e9duire taille grille/vitesse</li> </ul>"},{"location":"guide_utilisateur/utilisation/interface/#raccourcis-clavier","title":"Raccourcis clavier","text":"<ul> <li>Ctrl+S : Sauvegarde rapide</li> <li>Ctrl+L : Dernier fichier charg\u00e9</li> <li>Ctrl+R : Reset avec confirmation</li> </ul>"},{"location":"guide_utilisateur/utilisation/modes/","title":"Modes de Jeu","text":""},{"location":"guide_utilisateur/utilisation/modes/#introduction","title":"Introduction","text":"<p>Le Jeu de la Vie propose deux modes d'ex\u00e9cution distincts, chacun adapt\u00e9 \u00e0 des besoins sp\u00e9cifiques. Cette section vous aide \u00e0 choisir et utiliser le mode le plus appropri\u00e9.</p>"},{"location":"guide_utilisateur/utilisation/modes/#comparaison-des-modes","title":"Comparaison des modes","text":"Caract\u00e9ristique Mode Graphique Mode Console Interface GUI moderne ASCII simple Performance Moyenne Excellente M\u00e9moire ~50-100MB ~5-10MB Interaction Souris + Clavier Clavier seul Usage id\u00e9al Exploration visuelle Tests rapides"},{"location":"guide_utilisateur/utilisation/modes/#mode-graphique-sfml","title":"Mode Graphique (SFML)","text":""},{"location":"guide_utilisateur/utilisation/modes/#caracteristiques","title":"Caract\u00e9ristiques","text":"<ul> <li>Rendu fluide 60 FPS</li> <li>Zoom dynamique (x0.5 - x5)</li> <li>Grille redimensionnable</li> <li>Statistiques en temps r\u00e9el</li> <li>Population active</li> <li>G\u00e9n\u00e9ration actuelle</li> <li>Performance (FPS)</li> </ul>"},{"location":"guide_utilisateur/utilisation/modes/#avantages","title":"Avantages","text":"<p>\u2705 L\u00e9ger et rapide \u2705 Fonctionne partout \u2705 Id\u00e9al en SSH \u2705 Performances optimales</p>"},{"location":"guide_utilisateur/utilisation/modes/#limitations","title":"Limitations","text":"<p>\u274c Visibilit\u00e9 r\u00e9duite \u274c Contr\u00f4les limit\u00e9s \u274c Grille plus petite</p>"},{"location":"guide_utilisateur/utilisation/modes/#mode-console-ascii","title":"Mode Console (ASCII)","text":""},{"location":"guide_utilisateur/utilisation/modes/#affichage-type","title":"Affichage type","text":"<pre><code>+---+---+---+\n| * | * |   |\n+---+---+---+\n|   | * |   |\n+---+---+---+\n| * |   |   |\n+---+---+---+\n</code></pre>"},{"location":"guide_utilisateur/utilisation/modes/#caracteristiques_1","title":"Caract\u00e9ristiques","text":"<ul> <li>Interface l\u00e9g\u00e8re en ASCII</li> <li>Navigation au clavier</li> <li>Id\u00e9al pour les tests rapides</li> <li>Parfait pour les connexions SSH</li> </ul>"},{"location":"guide_utilisateur/utilisation/modes/#catalogue-des-motifs","title":"Catalogue des motifs","text":""},{"location":"guide_utilisateur/utilisation/modes/#oscillateurs","title":"Oscillateurs","text":"Nom P\u00e9riode Description Exemple Clignotant 2 3 cellules align\u00e9es <code>[***]</code> Grenouille 2 6 cellules en 2 lignes <code>[**_][_**]</code> Pentad\u00e9cathlon 15 10 cellules complexes <code>[voir image]</code>"},{"location":"guide_utilisateur/utilisation/modes/#vaisseaux","title":"Vaisseaux","text":"Nom Vitesse Taille Direction Planeur c/4 5 cellules Diagonale LWSS c/2 9 cellules Horizontale"},{"location":"guide_utilisateur/utilisation/modes/#structures-stables","title":"Structures stables","text":"Nom Taille Description Bloc 2x2 4 cellules carr\u00e9es Ruche 3x4 6 cellules hexagonales Pain 4x4 7 cellules asym\u00e9triques"},{"location":"guide_utilisateur/utilisation/modes/#guide-de-choix","title":"Guide de choix","text":""},{"location":"guide_utilisateur/utilisation/modes/#choisir-le-mode-graphique-si","title":"Choisir le mode graphique si :","text":"<ul> <li>Vous d\u00e9couvrez le jeu</li> <li>Vous souhaitez exp\u00e9rimenter visuellement</li> <li>Vous avez besoin de contr\u00f4les pr\u00e9cis</li> <li>Les ressources syst\u00e8me ne sont pas limit\u00e9es</li> </ul>"},{"location":"guide_utilisateur/utilisation/modes/#choisir-le-mode-console-si","title":"Choisir le mode console si :","text":"<ul> <li>Vous \u00eates en SSH</li> <li>Vous faites des tests rapides</li> <li>Vous avez des ressources limit\u00e9es</li> <li>Vous pr\u00e9f\u00e9rez la simplicit\u00e9</li> </ul>"},{"location":"technique/configuration/","title":"Configuration du Jeu","text":""},{"location":"technique/configuration/#options-disponibles","title":"Options disponibles","text":""},{"location":"technique/configuration/#parametres-de-base","title":"Param\u00e8tres de base","text":"<ul> <li>Dimensions de la grille</li> <li>Largeur : 10-1000 (d\u00e9faut: 50)</li> <li> <p>Hauteur : 10-1000 (d\u00e9faut: 50)</p> </li> <li> <p>Mode de jeu</p> </li> <li>Torique : true/false (d\u00e9faut: false)</li> <li> <p>Strat\u00e9gie : Classic/HighLife (d\u00e9faut: Classic)</p> </li> <li> <p>Interface</p> </li> <li>Renderer : Console/SFML (d\u00e9faut: Console)</li> <li>D\u00e9lai : 50-1000ms (d\u00e9faut: 100ms)</li> </ul>"},{"location":"technique/configuration/#valeurs-par-defaut","title":"Valeurs par d\u00e9faut","text":"<pre><code>struct DefaultConfig {\n    static const int WIDTH = 50;\n    static const int HEIGHT = 50;\n    static const bool TOROIDAL = false;\n    static const char* STRATEGY = \"Classic\";\n    static const char* RENDERER = \"Console\";\n    static const int DELAY = 100;\n};\n</code></pre>"},{"location":"technique/configuration/#gestion-de-la-configuration","title":"Gestion de la configuration","text":"<ul> <li>Chargement depuis fichier JSON</li> <li>Validation des param\u00e8tres</li> <li>Application des valeurs par d\u00e9faut</li> <li>Sauvegarde des pr\u00e9f\u00e9rences </li> </ul>"},{"location":"technique/diagrammes/","title":"Diagrammes Techniques","text":""},{"location":"technique/diagrammes/#diagramme-de-classes","title":"Diagramme de Classes","text":"<pre><code>classDiagram\n    class Game {\n        - Config config\n        - Grid *grid\n        - IRenderer *renderer\n        - IEvolutionStrategy *evolutionStrategy\n        - int iterationDelay\n        - int numberOfIterations\n        + Game()\n        + void run()\n        + void setup()\n        + setters()\n        + getters()\n        + ~Game()\n    }\n\n    class Grid {\n        - std::vector&lt;std::vector&lt;Cell&gt;&gt; cells\n        - int width\n        - int height\n        - bool isToroidal\n        + Grid(int width, int height)\n        + void initCells(const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;tab)\n        + void initCellsRandom()\n        + bool calculateNextGen(IEvolutionStrategy *evolutionStrategy)\n        + int countLiveNeighbors(int x, int y)\n        + void printCells() const\n        + bool isGridStable(const std::vector&lt;std::vector&lt;CellType&gt;&gt;&amp; nextGen) const\n        + getters()\n        + setters()\n        + ~Grid()\n    }\n\n    class Cell {\n        - CellType type\n        + Cell()\n        + Cell(CellType type)\n        + CellType getType() const\n        + void setType(CellType newType)\n        + ~Cell()\n    }\n\n    class CellType {\n        &lt;&lt;enumeration&gt;&gt;\n        Alive\n        Dead\n        Obstacle\n    }\n\n    class Config {\n        - map&lt;inputType, string&gt; questions\n        - map&lt;inputType, vector&lt;string&gt;&gt; validResponses\n        - unique_ptr&lt;InputHandler&gt; inputHandler\n        + Config()\n        + void setup(Game* game)\n        + T getInput(inputType type, const T&amp; defaultValue)\n        + string inputLoadChoice()\n        + string inputFilename()\n        + GridData inputGridData()\n        + bool inputGridToroidal()\n        + string inputEvolutionStrategy()\n        + string inputRenderer()\n        + int inputIterationNumber()\n        + int inputIterationDelay()\n        + ~Config()\n    }\n\n    class InputHandler {\n        + ~InputHandler()\n        + template&lt;T&gt; T handleInput(const string&amp; question, const T&amp; defaultValue, vector&lt;T&gt; validResponses, inputType inputType)\n    }\n\n    class IEvolutionStrategy {\n        + bool evolve(Cell* cell, int liveNeighbors) const = 0\n        + string getName() const = 0\n        + ~IEvolutionStrategy() = default\n    }\n\n    class ClassicEvolution {\n        - string name = \"Classic\"\n        + ClassicEvolution()\n        + bool evolve(Cell* cell, int liveNeighbors) const override\n        + string getName() const override\n        + ~ClassicEvolution() override\n    }\n\n    class HighLifeEvolution {\n        - string name = \"High Life\"\n        + HighLifeEvolution()\n        + bool evolve(Cell* cell, int liveNeighbors) const override\n        + string getName() const override\n        + ~HighLifeEvolution() override\n    }\n\n    class Subject {\n        - std::vector&lt;std::shared_ptr&lt;Observer&gt;&gt; observers\n        + void attach(std::shared_ptr&lt;Observer&gt; observer)\n        + void detach(std::shared_ptr&lt;Observer&gt; observer)\n        + void notify()\n        + ~Subject()\n    }\n\n    class Observer {\n        + void update(Subject* subject) = 0\n        + ~Observer()\n    }\n\n    class IRenderer {\n        + void render(Grid* grid)\n        + string getName() const\n        + void update(Subject *subject)\n        + ~IRenderer()\n    }\n\n    class ConsoleRenderer {\n        + ConsoleRenderer()\n        + void render(Grid* grid) override\n        + string getName() const override\n        + ~ConsoleRenderer() override\n    }\n\n    class GraphicRenderer {\n        - sf::RenderWindow window\n        - sf::Font font\n        - std::vector&lt;sf::Text&gt; configTexts\n        - sf::Text inputText\n        - std::string currentInput\n        - bool waitingForInput\n        + GraphicRenderer()\n        + void render(Grid* grid) override\n        + sf::RenderWindow&amp; getWindow()\n        + string getName() const override\n        + ~GraphicRenderer() override\n    }\n\n    class FileHandler {\n        + FileHandler()\n        + GridDimensions loadDimensions(string filename)\n        + vector&lt;vector&lt;int&gt;&gt; loadInputFromFile(string filename)\n        + void saveGridToFile(Grid* grid)\n        + void update(Subject* subject) override\n        + ~FileHandler()\n    }\n\n    IRenderer &lt;|-- GraphicRenderer  : inherits\n    IRenderer &lt;|-- ConsoleRenderer : inherits\n\n    IEvolutionStrategy &lt;|-- ClassicEvolution : inherits\n    IEvolutionStrategy &lt;|-- HighLifeEvolution : inherits\n\n    Game --&gt; Grid : uses\n    Game --&gt; IRenderer : uses\n    Game --&gt; IEvolutionStrategy : uses\n    Game --&gt; FileHandler : uses\n    Game --&gt; Config : uses\n\n    Config --&gt; InputHandler : uses\n\n    Grid --&gt; Cell : uses\n\n    Cell --&gt; CellType : uses\n\n    Subject  &lt;|-- Game : inherits\n    Observer &lt;|-- IRenderer : inherits\n    Observer &lt;|-- FileHandler : inherits</code></pre>"},{"location":"technique/diagrammes/#classes-principales","title":"Classes principales","text":"<ul> <li>Grid : Gestion de la grille de jeu</li> <li>Cell : Repr\u00e9sentation d'une cellule</li> <li>Game : Moteur du jeu</li> <li>Renderer : Interface d'affichage</li> <li>ConsoleRenderer</li> <li>SFMLRenderer</li> </ul>"},{"location":"technique/diagrammes/#strategies-devolution","title":"Strat\u00e9gies d'\u00e9volution","text":"<ul> <li>ClassicEvolution : </li> <li>R\u00e8gles standard de Conway</li> <li>Survie avec 2 ou 3 voisins</li> <li> <p>Naissance avec exactement 3 voisins</p> </li> <li> <p>HighLifeEvolution :</p> </li> <li>Variante avec r\u00e8gles \u00e9tendues</li> <li>Survie avec 2 ou 3 voisins</li> <li> <p>Naissance avec 3 ou 6 voisins</p> </li> <li> <p>Interface IEvolutionStrategy :</p> </li> <li>M\u00e9thode evolve() pour r\u00e8gles personnalis\u00e9es</li> <li>M\u00e9thode getName() pour identification</li> <li>Extension facile pour nouvelles r\u00e8gles</li> </ul>"},{"location":"technique/diagrammes/#diagramme-de-sequence","title":"Diagramme de s\u00e9quence","text":"<pre><code>---\nconfig:\n  theme: neutral\n---\nsequenceDiagram\n\n  User -&gt;&gt; Programme: Lancer le programme\n  Programme -&gt;&gt; Game: Instancie game\n  Programme -&gt;&gt; Game: Game.setup()\n  Game -&gt;&gt; Config: Config.setup(this)\n  Config -&gt;&gt; User: Demande la config\n  User --&gt;&gt; Config: Entre la config\n  alt User joue a partir d'un fichier\n    Config -&gt;&gt; FileHandler: loadGridFromFile()\n    FileHandler --&gt;&gt; Config: return vector des 1 et 0\n    Config -&gt;&gt; Grid: Grid.initCells()\n  end\n  alt User joue a partir d'une nouvelle partie\n    Config -&gt;&gt; Grid: Grid.initCellsRandom()\n  end\n  Grid -&gt;&gt; Cell: Creation des cellules\n  Config --&gt;&gt;Game: Set les valeurs pour game\n  Game -&gt;&gt; IRenderer: Subject.attach()\n  Game -&gt;&gt; FileHandler: Subject.attach()\n\n\n  Programme -&gt;&gt; Game: Game.run()\n  loop Pour chaque it\u00e9ration\n    Game -&gt;&gt; Grid: Grid.calculateNextGen()\n    loop Pour chaque cellule\n      Grid -&gt;&gt; IEvolutionStrategy: IEvolutionStrategy.update(Cell) \n    end\n    Game -&gt;&gt; Game: Subject.notify()\n    Game -&gt;&gt; FileHandler: FileHandler.saveGridToFile()\n    Game -&gt;&gt; IRenderer: IRenderer.update()\n    IRenderer --&gt;&gt; User: Montre la grille maj\n  end\n\n  Game --&gt;&gt; Programme: Terminer apr\u00e8s conditions atteintes (stabilit\u00e9 ou it\u00e9rations max)\n  Programme --&gt;&gt; User: Fin</code></pre>"},{"location":"technique/diagrammes/#flux-principal","title":"Flux principal","text":"<ol> <li>Initialisation du jeu</li> <li>Boucle de simulation</li> <li>Mise \u00e0 jour de l'affichage</li> <li>Gestion des \u00e9v\u00e9nements</li> </ol>"},{"location":"technique/diagrammes/#diagramme-dactivite","title":"Diagramme d'Activit\u00e9","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Initialisation\n    Initialisation --&gt; BoucleJeu\n\n    state BoucleJeu {\n        [*] --&gt; AttenteInput\n        AttenteInput --&gt; MiseAJourGrille : Input re\u00e7u\n        MiseAJourGrille --&gt; CalculGeneration\n        CalculGeneration --&gt; Rendu\n        Rendu --&gt; AttenteInput\n    }\n\n    BoucleJeu --&gt; [*] : Quitter</code></pre>"},{"location":"technique/diagrammes/#diagramme-de-cas-dutilisation","title":"Diagramme de Cas d'Utilisation","text":"<pre><code>graph TD\n    User((Utilisateur))\n\n    subgraph \"Jeu de la Vie\"\n        A[D\u00e9marrer simulation]\n        B[Modifier cellules]\n        C[Charger motif]\n        D[Sauvegarder \u00e9tat]\n        E[Ajuster vitesse]\n        F[Changer mode]\n    end\n\n    User --&gt; A\n    User --&gt; B\n    User --&gt; C\n    User --&gt; D\n    User --&gt; E\n    User --&gt; F</code></pre>"},{"location":"technique/diagrammes/#architecture-mvc","title":"Architecture MVC","text":"<ul> <li>Mod\u00e8le : Grid, Cell</li> <li>Vue : Renderers</li> <li>Contr\u00f4leur : Game</li> </ul>"},{"location":"technique/diagrammes/#points-cles","title":"Points cl\u00e9s","text":"<ul> <li>S\u00e9paration claire des responsabilit\u00e9s</li> <li>Interfaces bien d\u00e9finies</li> <li>Extension facile (nouveaux renderers)</li> <li>Patterns de conception appliqu\u00e9s</li> </ul>"},{"location":"technique/diagrammes/#relations-entre-composants","title":"Relations entre composants","text":""},{"location":"technique/diagrammes/#hierarchie-des-classes","title":"Hi\u00e9rarchie des classes","text":"<ul> <li>Game : Contr\u00f4leur principal</li> <li>Grid : Gestion de l'\u00e9tat</li> <li>Cell : Unit\u00e9 de base</li> <li>Renderer : Interface d'affichage</li> <li>ConsoleRenderer</li> <li>SFMLRenderer</li> </ul>"},{"location":"technique/diagrammes/#flux-de-donnees","title":"Flux de donn\u00e9es","text":"<ol> <li>Input utilisateur \u2192 Game</li> <li>Game \u2192 Grid (\u00e9volution)</li> <li>Grid \u2192 Renderer (affichage)</li> <li>Renderer \u2192 Utilisateur (feedback)</li> </ol>"},{"location":"technique/diagrammes/#points-dextension","title":"Points d'extension","text":"<ul> <li>Nouveaux renderers</li> <li>R\u00e8gles personnalis\u00e9es</li> <li>Motifs additionnels</li> <li>Modes de simulation</li> </ul>"},{"location":"technique/tests/","title":"Tests Unitaires et Int\u00e9gration","text":""},{"location":"technique/tests/#vue-densemble","title":"Vue d'ensemble","text":""},{"location":"technique/tests/#objectifs-des-tests","title":"Objectifs des tests","text":"<ul> <li>Validation du comportement attendu</li> <li>D\u00e9tection pr\u00e9coce des r\u00e9gressions</li> <li>Documentation du code par l'exemple</li> <li>Facilitation des refactoring</li> </ul>"},{"location":"technique/tests/#couverture-cible","title":"Couverture cible","text":"Type de test Couverture minimale Unitaire 90% Int\u00e9gration 75% Fonctionnel 60%"},{"location":"technique/tests/#organisation","title":"Organisation","text":""},{"location":"technique/tests/#structure-des-tests","title":"Structure des tests","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 model/\n\u2502   \u2502   \u251c\u2500\u2500 grid_test.cpp\n\u2502   \u2502   \u251c\u2500\u2500 cell_test.cpp\n\u2502   \u2502   \u2514\u2500\u2500 rules_test.cpp\n\u2502   \u2514\u2500\u2500 view/\n\u2502       \u251c\u2500\u2500 console_test.cpp\n\u2502       \u2514\u2500\u2500 sfml_test.cpp\n\u251c\u2500\u2500 integration/\n\u2502   \u2514\u2500\u2500 game_test.cpp\n\u2514\u2500\u2500 functional/\n    \u2514\u2500\u2500 scenarios_test.cpp\n</code></pre>"},{"location":"technique/tests/#tests-unitaires","title":"Tests Unitaires","text":""},{"location":"technique/tests/#grid","title":"Grid","text":"<pre><code>class GridTest : public ::testing::Test {\nprotected:\n    void SetUp() override {\n        grid = std::make_unique&lt;Grid&gt;(10, 10);\n    }\n\n    std::unique_ptr&lt;Grid&gt; grid;\n};\n\nTEST_F(GridTest, InitializationTest) {\n    EXPECT_EQ(grid-&gt;getWidth(), 10);\n    EXPECT_EQ(grid-&gt;getHeight(), 10);\n    EXPECT_FALSE(grid-&gt;getCell(5, 5));\n}\n\nTEST_F(GridTest, CellManipulationTest) {\n    grid-&gt;setCell(1, 1, true);\n    EXPECT_TRUE(grid-&gt;getCell(1, 1));\n\n    grid-&gt;setCell(1, 1, false);\n    EXPECT_FALSE(grid-&gt;getCell(1, 1));\n}\n</code></pre>"},{"location":"technique/tests/#rules","title":"Rules","text":"<pre><code>TEST(RulesTest, BasicEvolution) {\n    Rules rules;\n    Cell cell;\n\n    // Test naissance\n    EXPECT_TRUE(rules.computeNextState(cell, 3)) \n        &lt;&lt; \"Une cellule morte avec 3 voisins devrait na\u00eetre\";\n\n    // Test survie\n    cell.setAlive(true);\n    EXPECT_TRUE(rules.computeNextState(cell, 2))\n        &lt;&lt; \"Une cellule vivante avec 2 voisins devrait survivre\";\n\n    // Test mort par solitude\n    EXPECT_FALSE(rules.computeNextState(cell, 1))\n        &lt;&lt; \"Une cellule vivante avec 1 voisin devrait mourir\";\n}\n</code></pre>"},{"location":"technique/tests/#tests-dintegration","title":"Tests d'Int\u00e9gration","text":""},{"location":"technique/tests/#game-loop","title":"Game Loop","text":"<pre><code>TEST(GameIntegrationTest, FullCycle) {\n    Game game(800, 600);\n\n    // Configuration initiale\n    ASSERT_TRUE(game.initialize());\n\n    // Simulation d'un cycle complet\n    game.update();\n    EXPECT_NO_THROW(game.render());\n\n    // V\u00e9rification de l'\u00e9tat\n    const auto&amp; grid = game.getGrid();\n    EXPECT_GT(grid.getAliveCells(), 0);\n}\n</code></pre>"},{"location":"technique/tests/#persistance","title":"Persistance","text":"<pre><code>TEST(PersistenceTest, SaveLoadState) {\n    Game game;\n    game.initialize();\n\n    // Sauvegarde\n    ASSERT_TRUE(game.saveState(\"test.save\"));\n\n    // Modification\n    game.reset();\n\n    // Chargement\n    ASSERT_TRUE(game.loadState(\"test.save\"));\n    EXPECT_EQ(game.getGrid(), originalGrid);\n}\n</code></pre>"},{"location":"technique/tests/#tests-de-performance","title":"Tests de Performance","text":""},{"location":"technique/tests/#benchmarks","title":"Benchmarks","text":"<pre><code>TEST(PerformanceTest, GridEvolution) {\n    Grid grid(100, 100);\n\n    auto start = std::chrono::high_resolution_clock::now();\n    for(int i = 0; i &lt; 1000; i++) {\n        grid.evolve();\n    }\n    auto end = std::chrono::high_resolution_clock::now();\n\n    auto duration = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;\n        (end - start).count();\n\n    EXPECT_LT(duration, 1000) \n        &lt;&lt; \"1000 \u00e9volutions devraient prendre moins d'une seconde\";\n}\n</code></pre>"},{"location":"technique/tests/#execution-des-tests","title":"Ex\u00e9cution des Tests","text":""},{"location":"technique/tests/#commandes","title":"Commandes","text":"<pre><code># Compilation et ex\u00e9cution\ncmake -DBUILD_TESTING=ON ..\nmake\nctest --output-on-failure\n\n# Tests sp\u00e9cifiques\n./tests/unit_tests --gtest_filter=GridTest.*\n./tests/unit_tests --gtest_filter=RulesTest.*\n</code></pre>"},{"location":"technique/tests/#options-de-test","title":"Options de test","text":"Option Description --gtest_filter Filtre les tests \u00e0 ex\u00e9cuter --gtest_repeat R\u00e9p\u00e8te les tests N fois --gtest_break_on_failure Arr\u00eate \u00e0 la premi\u00e8re erreur --gtest_output Format de sortie (XML, JSON)"},{"location":"technique/tests/#integration-continue","title":"Int\u00e9gration Continue","text":""},{"location":"technique/tests/#github-actions","title":"GitHub Actions","text":"<pre><code>test:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    - name: Configure\n      run: cmake -DBUILD_TESTING=ON ..\n    - name: Build\n      run: make\n    - name: Test\n      run: ctest --output-on-failure\n</code></pre>"},{"location":"technique/tests/#rapports","title":"Rapports","text":"<ul> <li>Couverture de code (gcov/lcov)</li> <li>R\u00e9sultats des tests (JUnit)</li> <li>Benchmarks (Google Benchmark)</li> <li>Analyse statique (clang-tidy)</li> </ul>"},{"location":"technique/architecture/extensibility/","title":"Extensibilit\u00e9","text":""},{"location":"technique/architecture/extensibility/#vue-densemble","title":"Vue d'ensemble","text":"<p>Le projet est con\u00e7u pour \u00eatre facilement extensible via plusieurs points d'entr\u00e9e. Cette documentation explique comment \u00e9tendre les fonctionnalit\u00e9s principales.</p>"},{"location":"technique/architecture/extensibility/#points-dextension","title":"Points d'extension","text":""},{"location":"technique/architecture/extensibility/#renderers-affichage","title":"Renderers (Affichage)","text":"<pre><code>// Interface de base pour tous les renderers\nclass Renderer {\npublic:\n    virtual void draw(const Grid&amp; grid) = 0;\n    virtual void handleEvents() = 0;\n    virtual ~Renderer() = default;\n};\n\n// Exemple d'impl\u00e9mentation\nclass CustomRenderer : public Renderer {\n    void draw(const Grid&amp; grid) override {\n        // Votre logique de rendu personnalis\u00e9e\n    }\n    void handleEvents() override {\n        // Gestion des \u00e9v\u00e9nements sp\u00e9cifiques\n    }\n};\n</code></pre>"},{"location":"technique/architecture/extensibility/#regles-du-jeu","title":"R\u00e8gles du jeu","text":"<pre><code>class Rules {\npublic:\n    virtual bool computeNextState(const Cell&amp; cell, int neighbors) = 0;\n    virtual void configure(const Config&amp; config) = 0;\n};\n\n// Exemple : R\u00e8gles personnalis\u00e9es\nclass CustomRules : public Rules {\n    bool computeNextState(const Cell&amp; cell, int neighbors) override {\n        // Vos r\u00e8gles d'\u00e9volution personnalis\u00e9es\n        return neighbors == 3 || (cell.isAlive() &amp;&amp; neighbors == 2);\n    }\n};\n</code></pre>"},{"location":"technique/architecture/extensibility/#motifs-patterns","title":"Motifs (Patterns)","text":"<pre><code>{\n  \"name\": \"Mon Motif\",\n  \"author\": \"Votre Nom\",\n  \"description\": \"Description du motif\",\n  \"width\": 3,\n  \"height\": 3,\n  \"cells\": [\n    [0,1,0],\n    [1,1,1],\n    [0,1,0]\n  ]\n}\n</code></pre>"},{"location":"technique/architecture/extensibility/#guide-dimplementation","title":"Guide d'impl\u00e9mentation","text":""},{"location":"technique/architecture/extensibility/#creer-un-nouveau-renderer","title":"Cr\u00e9er un nouveau Renderer","text":"<ol> <li>Cr\u00e9er une classe h\u00e9ritant de <code>Renderer</code></li> <li>Impl\u00e9menter les m\u00e9thodes virtuelles pures</li> <li>Enregistrer dans la factory : <pre><code>RendererFactory::register(\"custom\", []() {\n    return std::make_unique&lt;CustomRenderer&gt;();\n});\n</code></pre></li> </ol>"},{"location":"technique/architecture/extensibility/#ajouter-des-regles","title":"Ajouter des r\u00e8gles","text":"<ol> <li>H\u00e9riter de la classe <code>Rules</code></li> <li>Impl\u00e9menter la logique d'\u00e9volution</li> <li>Configurer via fichier : <pre><code>rules:\n  type: custom\n  params:\n    survive: [2,3]\n    birth: [3]\n</code></pre></li> </ol>"},{"location":"technique/architecture/extensibility/#creer-des-motifs","title":"Cr\u00e9er des motifs","text":"<ol> <li>Cr\u00e9er un fichier JSON dans <code>/patterns</code></li> <li>Structure requise :</li> <li>Nom et m\u00e9tadonn\u00e9es</li> <li>Dimensions</li> <li>\u00c9tats des cellules</li> <li>Validation automatique</li> </ol>"},{"location":"technique/architecture/extensibility/#bonnes-pratiques","title":"Bonnes pratiques","text":""},{"location":"technique/architecture/extensibility/#pour-les-renderers","title":"Pour les Renderers","text":"<p>\u2705 G\u00e9rer proprement les ressources \u2705 Supporter le redimensionnement \u2705 Documentation claire des contr\u00f4les \u274c \u00c9viter les d\u00e9pendances lourdes \u274c Ne pas modifier la logique du jeu</p>"},{"location":"technique/architecture/extensibility/#pour-les-regles","title":"Pour les R\u00e8gles","text":"<p>\u2705 R\u00e8gles simples et document\u00e9es \u2705 Tests unitaires complets \u2705 Configuration flexible \u274c \u00c9viter la complexit\u00e9 inutile \u274c Ne pas modifier l'\u00e9tat global</p>"},{"location":"technique/architecture/extensibility/#pour-les-motifs","title":"Pour les Motifs","text":"<p>\u2705 Format JSON valide \u2705 Dimensions raisonnables \u2705 Description claire \u274c \u00c9viter les motifs trop grands \u274c Pas de donn\u00e9es invalides</p>"},{"location":"technique/architecture/overview/","title":"Architecture du Projet","text":""},{"location":"technique/architecture/overview/#vue-densemble","title":"Vue d'ensemble","text":""},{"location":"technique/architecture/overview/#principes-architecturaux","title":"Principes architecturaux","text":"<ul> <li>Modularit\u00e9 : Composants faiblement coupl\u00e9s</li> <li>Extensibilit\u00e9 : Points d'extension clairs</li> <li>Testabilit\u00e9 : Composants isol\u00e9s facilement testables</li> <li>Maintenabilit\u00e9 : Code organis\u00e9 et document\u00e9</li> </ul>"},{"location":"technique/architecture/overview/#pattern-mvc","title":"Pattern MVC","text":"<pre><code>graph TD\n    M[Model] --&gt; C[Controller]\n    V[View] --&gt; C\n    C --&gt; M\n    C --&gt; V</code></pre>"},{"location":"technique/architecture/overview/#modele-logique-du-jeu","title":"Mod\u00e8le (Logique du jeu)","text":"<ul> <li>Gestion de la grille</li> <li>\u00c9tats des cellules</li> <li>R\u00e8gles d'\u00e9volution</li> <li>Calcul des g\u00e9n\u00e9rations</li> <li>Validation des r\u00e8gles</li> <li>Gestion de l'historique</li> </ul>"},{"location":"technique/architecture/overview/#vue-interface-utilisateur","title":"Vue (Interface utilisateur)","text":"<ul> <li>Rendu console (ASCII)</li> <li>Rendu graphique (SFML)</li> <li>Syst\u00e8me d'\u00e9v\u00e9nements</li> <li>Gestion des fen\u00eatres</li> <li>Affichage des statistiques</li> <li>Rendu des motifs</li> </ul>"},{"location":"technique/architecture/overview/#controleur-gestion-du-jeu","title":"Contr\u00f4leur (Gestion du jeu)","text":"<ul> <li>Boucle principale</li> <li>Gestion des inputs</li> <li>Coordination mod\u00e8le/vue</li> <li>Gestion des \u00e9tats</li> <li>Configuration du jeu</li> <li>Sauvegarde/Chargement</li> </ul>"},{"location":"technique/architecture/overview/#pattern-observer","title":"Pattern Observer","text":"<ul> <li>Subject (Game)</li> <li>Maintient liste d'observateurs</li> <li>Notifie lors des changements d'\u00e9tat</li> <li> <p>M\u00e9thodes attach(), detach(), notify()</p> </li> <li> <p>Observers</p> </li> <li>IRenderer : Met \u00e0 jour l'affichage</li> <li>FileHandler : Sauvegarde l'\u00e9tat</li> <li>R\u00e9agissent via update(Subject*)</li> </ul> <pre><code>// Exemple d'impl\u00e9mentation\nclass Game : public Subject {\n    void update() {\n        grid.evolve();\n        notify(); // Notifie tous les observateurs\n    }\n};\n\nclass IRenderer : public Observer {\n    void update(Subject* subject) override {\n        render(static_cast&lt;Game*&gt;(subject)-&gt;getGrid());\n    }\n};\n</code></pre>"},{"location":"technique/architecture/overview/#structure-du-code","title":"Structure du code","text":""},{"location":"technique/architecture/overview/#organisation-des-fichiers","title":"Organisation des fichiers","text":"<pre><code>src/\n\u251c\u2500\u2500 model/\n\u2502   \u251c\u2500\u2500 grid.hpp     # Grille de jeu\n\u2502   \u251c\u2500\u2500 cell.hpp     # Cellule individuelle\n\u2502   \u2514\u2500\u2500 rules.hpp    # R\u00e8gles d'\u00e9volution\n\u251c\u2500\u2500 view/\n\u2502   \u251c\u2500\u2500 renderer.hpp # Interface de rendu\n\u2502   \u251c\u2500\u2500 console.hpp  # Rendu console\n\u2502   \u2514\u2500\u2500 sfml.hpp     # Rendu SFML\n\u2514\u2500\u2500 controller/\n    \u251c\u2500\u2500 game.hpp     # Logique principale\n    \u2514\u2500\u2500 input.hpp    # Gestion des entr\u00e9es\n</code></pre>"},{"location":"technique/architecture/overview/#dependances","title":"D\u00e9pendances","text":"<pre><code>graph LR\n    Game --&gt; Grid\n    Grid --&gt; Cell\n    Game --&gt; Renderer\n    Renderer --&gt; Grid\n    ConsoleRenderer --&gt; Renderer\n    SFMLRenderer --&gt; Renderer</code></pre>"},{"location":"technique/architecture/overview/#flux-de-donnees","title":"Flux de donn\u00e9es","text":""},{"location":"technique/architecture/overview/#cycle-de-vie-dune-frame","title":"Cycle de vie d'une frame","text":"<ol> <li>Input utilisateur \u2192 Controller</li> <li>Controller \u2192 Model (mise \u00e0 jour)</li> <li>Model \u2192 View (notification)</li> <li>View \u2192 Rendu \u00e9cran</li> </ol>"},{"location":"technique/architecture/overview/#communication-inter-composants","title":"Communication inter-composants","text":"<pre><code>// Exemple de flux de donn\u00e9es\nclass Game {\n    void update() {\n        // 1. Collecte des inputs\n        InputState inputs = inputHandler.getState();\n\n        // 2. Mise \u00e0 jour du mod\u00e8le\n        grid.evolve();\n\n        // 3. Notification de la vue\n        renderer-&gt;draw(grid);\n    }\n};\n</code></pre>"},{"location":"technique/architecture/overview/#points-dextension","title":"Points d'extension","text":""},{"location":"technique/architecture/overview/#interfaces-cles","title":"Interfaces cl\u00e9s","text":"<pre><code>// Renderer abstrait\nclass Renderer {\n    virtual void draw(const Grid&amp;) = 0;\n    virtual void handleEvents() = 0;\n};\n\n// R\u00e8gles du jeu\nclass Rules {\n    virtual bool computeNextState(...) = 0;\n};\n</code></pre>"},{"location":"technique/architecture/overview/#mecanismes-dextension","title":"M\u00e9canismes d'extension","text":"<ul> <li>Factory pour les renderers</li> <li>Strategy pour les r\u00e8gles</li> <li>Observer pour les mises \u00e0 jour</li> <li>Builder pour les motifs</li> </ul>"},{"location":"technique/architecture/overview/#considerations-techniques","title":"Consid\u00e9rations techniques","text":""},{"location":"technique/architecture/overview/#performance","title":"Performance","text":"<ul> <li>Mise \u00e0 jour optimis\u00e9e de la grille</li> <li>Cache des \u00e9tats pr\u00e9c\u00e9dents</li> <li>Rendu efficace (SFML)</li> </ul>"},{"location":"technique/architecture/overview/#memoire","title":"M\u00e9moire","text":"<ul> <li>Gestion intelligente des ressources</li> <li>Utilisation de smart pointers</li> <li>\u00c9vitement des copies inutiles</li> </ul>"},{"location":"technique/architecture/overview/#thread-safety","title":"Thread-safety","text":"<ul> <li>Mod\u00e8le thread-safe</li> <li>Synchronisation vue/mod\u00e8le</li> <li>Gestion des \u00e9v\u00e9nements async</li> </ul>"},{"location":"technique/workflow/development/","title":"Guide de D\u00e9veloppement","text":""},{"location":"technique/workflow/development/#vue-densemble","title":"Vue d'ensemble","text":""},{"location":"technique/workflow/development/#philosophie","title":"Philosophie","text":"<p>Notre workflow est con\u00e7u pour \u00eatre : - Simple \u00e0 comprendre - Facile \u00e0 suivre - Efficace en \u00e9quipe - Maintenable dans le temps</p>"},{"location":"technique/workflow/development/#outils-requis","title":"Outils requis","text":"Outil Version Usage Git 2.34+ Gestion de version VS Code/CLion Latest IDE CMake 3.20+ Build system Clang-format 14+ Style de code"},{"location":"technique/workflow/development/#workflow-de-developpement","title":"Workflow de d\u00e9veloppement","text":""},{"location":"technique/workflow/development/#1-preparation","title":"1. Pr\u00e9paration","text":"<pre><code># Mise \u00e0 jour du d\u00e9p\u00f4t\ngit checkout main\ngit pull origin main\n\n# Cr\u00e9ation de branche\ngit checkout -b feature/ma-fonctionnalite\n</code></pre>"},{"location":"technique/workflow/development/#2-developpement","title":"2. D\u00e9veloppement","text":"<pre><code># Compilation et tests fr\u00e9quents\nmkdir -p build &amp;&amp; cd build\ncmake ..\nmake -j$(nproc)\nctest --output-on-failure\n\n# Commits atomiques\ngit add src/feature.cpp\ngit commit -m \"feat(core): ajouter nouvelle fonctionnalit\u00e9\"\n</code></pre>"},{"location":"technique/workflow/development/#3-pull-request","title":"3. Pull Request","text":"<ol> <li>Pr\u00e9parer</li> <li>Tests passent</li> <li>Documentation \u00e0 jour</li> <li> <p>Code format\u00e9</p> </li> <li> <p>Soumettre <pre><code>git push origin feature/ma-fonctionnalite\n# Cr\u00e9er PR sur GitHub\n</code></pre></p> </li> </ol>"},{"location":"technique/workflow/development/#standards-de-code","title":"Standards de Code","text":""},{"location":"technique/workflow/development/#style","title":"Style","text":"<pre><code>// Exemple de style\nclass MyClass {\npublic:\n    explicit MyClass(int value);\n    void doSomething();\n\nprivate:\n    int m_value;\n};\n</code></pre>"},{"location":"technique/workflow/development/#conventions-de-nommage","title":"Conventions de nommage","text":"Type Convention Exemple Classes PascalCase <code>GameEngine</code> M\u00e9thodes camelCase <code>updateState()</code> Variables camelCase <code>cellCount</code> Constantes UPPER_CASE <code>MAX_SIZE</code>"},{"location":"technique/workflow/development/#messages-de-commit","title":"Messages de commit","text":"<pre><code># Format\ntype(scope): description\n\n# Exemples\nfeat(grid): ajouter mode torique\nfix(ui): corriger affichage statistiques\ndocs(readme): mettre \u00e0 jour installation\ntest(core): ajouter tests unitaires\n</code></pre>"},{"location":"technique/workflow/development/#documentation","title":"Documentation","text":""},{"location":"technique/workflow/development/#code","title":"Code","text":"<pre><code>/**\n * @brief Calcule la prochaine g\u00e9n\u00e9ration\n * @param grid Grille actuelle\n * @return Nombre de cellules modifi\u00e9es\n * @throws std::invalid_argument Si la grille est invalide\n */\nint evolve(Grid&amp; grid);\n</code></pre>"},{"location":"technique/workflow/development/#markdown","title":"Markdown","text":"<pre><code># Composant X\n\n## Utilisation\nExemple de code...\n\n## API\nListe des m\u00e9thodes...\n</code></pre>"},{"location":"technique/workflow/development/#tests","title":"Tests","text":""},{"location":"technique/workflow/development/#unitaires","title":"Unitaires","text":"<pre><code>TEST(GridTest, Evolution) {\n    Grid grid(3, 3);\n    grid.setCell(1, 1, true);\n    EXPECT_EQ(grid.evolve(), 1);\n}\n</code></pre>"},{"location":"technique/workflow/development/#integration","title":"Int\u00e9gration","text":"<pre><code>TEST(GameTest, FullCycle) {\n    Game game;\n    ASSERT_TRUE(game.initialize());\n    EXPECT_NO_THROW(game.update());\n}\n</code></pre>"},{"location":"technique/workflow/development/#revue-de-code","title":"Revue de Code","text":""},{"location":"technique/workflow/development/#checklist-reviewer","title":"Checklist reviewer","text":"<ul> <li>[ ] Tests appropri\u00e9s</li> <li>[ ] Documentation claire</li> <li>[ ] Pas de code mort</li> <li>[ ] Performance acceptable</li> <li>[ ] Standards respect\u00e9s</li> </ul>"},{"location":"technique/workflow/development/#feedback","title":"Feedback","text":"<p>\u2705 BIEN : <pre><code>Suggestion : utiliser std::vector ici pour \u00e9viter la gestion manuelle de la m\u00e9moire\n</code></pre></p> <p>\u274c \u00c0 \u00c9VITER : <pre><code>Ce code est mauvais\n</code></pre></p>"},{"location":"technique/workflow/development/#integration-continue","title":"Int\u00e9gration Continue","text":""},{"location":"technique/workflow/development/#github-actions","title":"GitHub Actions","text":"<pre><code>name: CI\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build &amp; Test\n        run: |\n          mkdir build\n          cd build\n          cmake ..\n          make\n          ctest\n</code></pre>"},{"location":"technique/workflow/development/#verifications-automatiques","title":"V\u00e9rifications automatiques","text":"<ul> <li>Build multi-plateforme</li> <li>Tests unitaires</li> <li>Couverture de code</li> <li>Style (clang-format)</li> <li>Documentation</li> </ul>"},{"location":"technique/workflow/development/#deploiement","title":"D\u00e9ploiement","text":""},{"location":"technique/workflow/development/#versioning","title":"Versioning","text":"<ul> <li>MAJOR : changements incompatibles</li> <li>MINOR : nouvelles fonctionnalit\u00e9s</li> <li>PATCH : corrections de bugs</li> </ul>"},{"location":"technique/workflow/development/#release","title":"Release","text":"<ol> <li>Mettre \u00e0 jour version</li> <li>G\u00e9n\u00e9rer changelog</li> <li>Cr\u00e9er tag Git</li> <li>Build artifacts</li> <li>Publier release</li> </ol>"},{"location":"technique/workflow/tools/","title":"Outils &amp; Environnement de D\u00e9veloppement","text":""},{"location":"technique/workflow/tools/#stack-technique","title":"Stack Technique","text":""},{"location":"technique/workflow/tools/#ide-editeurs-recommandes","title":"IDE &amp; \u00c9diteurs recommand\u00e9s","text":"Outil Version Extensions n\u00e9cessaires VS Code 1.80+ - C/C++ - CMake Tools - Git Graph CLion 2023.2+ Int\u00e9gr\u00e9 Visual Studio 2022+ - C++ Desktop"},{"location":"technique/workflow/tools/#outils-de-build","title":"Outils de build","text":"Outil Version min Usage CMake 3.20+ Build system Ninja 1.10+ Build rapide Make 4.0+ Alternative Linux"},{"location":"technique/workflow/tools/#qualite-de-code","title":"Qualit\u00e9 de code","text":"<pre><code># .clang-format\nBasedOnStyle: Google\nIndentWidth: 4\nColumnLimit: 100\n</code></pre>"},{"location":"technique/workflow/tools/#configuration-de-lenvironnement","title":"Configuration de l'environnement","text":""},{"location":"technique/workflow/tools/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code># Outils essentiels\nsudo apt update\nsudo apt install -y \\\n    build-essential \\\n    cmake \\\n    ninja-build \\\n    clang-format \\\n    clang-tidy \\\n    cppcheck\n\n# Configuration Git\ngit config --global user.name \"Votre Nom\"\ngit config --global user.email \"email@example.com\"\n</code></pre>"},{"location":"technique/workflow/tools/#windows","title":"Windows","text":"<pre><code># Avec Chocolatey\nchoco install -y `\n    visualstudio2022-workload-nativedesktop `\n    cmake `\n    ninja `\n    llvm `\n    git\n\n# Configuration Git\ngit config --global core.autocrlf true\n</code></pre>"},{"location":"technique/workflow/tools/#integration-continue","title":"Int\u00e9gration Continue","text":""},{"location":"technique/workflow/tools/#github-actions","title":"GitHub Actions","text":"<pre><code>name: CI\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        build_type: [Debug, Release]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Configure CMake\n      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}\n\n    - name: Build\n      run: cmake --build build\n\n    - name: Test\n      run: ctest --test-dir build\n</code></pre>"},{"location":"technique/workflow/tools/#verifications-automatiques","title":"V\u00e9rifications automatiques","text":"<ul> <li>\u2705 Build multi-plateforme</li> <li>\u2705 Tests unitaires</li> <li>\u2705 Style de code</li> <li>\u2705 Analyse statique</li> <li>\u2705 Documentation</li> </ul>"},{"location":"technique/workflow/tools/#outils-de-test","title":"Outils de test","text":""},{"location":"technique/workflow/tools/#framework-de-test","title":"Framework de test","text":"<pre><code>// Exemple avec GoogleTest\nTEST(GridTest, Evolution) {\n    Grid grid(3, 3);\n    grid.setCell(1, 1, true);\n    grid.evolve();\n    EXPECT_FALSE(grid.getCell(1, 1));\n}\n</code></pre>"},{"location":"technique/workflow/tools/#couverture-de-code","title":"Couverture de code","text":"<pre><code># G\u00e9n\u00e9rer rapport de couverture\ncmake -DENABLE_COVERAGE=ON ..\nmake coverage\n</code></pre>"},{"location":"technique/workflow/tools/#documentation","title":"Documentation","text":""},{"location":"technique/workflow/tools/#doxygen","title":"Doxygen","text":"<pre><code>/**\n * @brief Calcule la prochaine g\u00e9n\u00e9ration\n * @param grid Grille actuelle\n * @return Nombre de cellules vivantes\n */\nint evolve(Grid&amp; grid);\n</code></pre>"},{"location":"technique/workflow/tools/#mkdocs","title":"MkDocs","text":"<pre><code># mkdocs.yml\nsite_name: Jeu de la Vie\ntheme:\n  name: material\n  palette:\n    primary: indigo\n</code></pre>"},{"location":"technique/workflow/tools/#scripts-utiles","title":"Scripts utiles","text":""},{"location":"technique/workflow/tools/#build-test","title":"Build &amp; Test","text":"<pre><code>#!/bin/bash\n# build.sh\nmkdir -p build &amp;&amp; cd build\ncmake ..\nmake -j$(nproc)\nctest --output-on-failure\n</code></pre>"},{"location":"technique/workflow/tools/#verification-style","title":"V\u00e9rification style","text":"<pre><code>#!/bin/bash\n# check-style.sh\nfind src include -iname *.hpp -o -iname *.cpp \\\n    | xargs clang-format -i --style=file\n</code></pre>"}]}